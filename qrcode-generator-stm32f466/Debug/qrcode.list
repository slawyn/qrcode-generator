
qrcode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002738  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b2c  08002b2c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002b2c  08002b2c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b2c  08002b2c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000064  08002b98  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200008bc  08002b98  000208bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b67  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000077c  00000000  00000000  00023bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a8  00000000  00000000  00024378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000170  00000000  00000000  00024520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199e0  00000000  00000000  00024690  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001a56  00000000  00000000  0003e070  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cc85  00000000  00000000  0003fac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc74b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007f4  00000000  00000000  000cc7c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080028e4 	.word	0x080028e4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	080028e4 	.word	0x080028e4

08000204 <_sbrk>:

#include <stdint.h>
#include <errno.h>
#include <stdio.h>

caddr_t  _sbrk(int incr) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	extern char _Heap_Limit; // Defined by the linker.

	static char* current_heap_end;
	char* current_block_address;

	if (current_heap_end == 0) {
 800020c:	4b14      	ldr	r3, [pc, #80]	; (8000260 <_sbrk+0x5c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d102      	bne.n	800021a <_sbrk+0x16>
		current_heap_end = &_Heap_Begin;
 8000214:	4b12      	ldr	r3, [pc, #72]	; (8000260 <_sbrk+0x5c>)
 8000216:	4a13      	ldr	r2, [pc, #76]	; (8000264 <_sbrk+0x60>)
 8000218:	601a      	str	r2, [r3, #0]
	}

	current_block_address = current_heap_end;
 800021a:	4b11      	ldr	r3, [pc, #68]	; (8000260 <_sbrk+0x5c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	60fb      	str	r3, [r7, #12]

	// Need to align heap to word boundary, else will get
	// hard faults on Cortex-M0. So we assume that heap starts on
	// word boundary, hence make sure we always add a multiple of
	// 4 to it.
	incr = (incr + 3) & (~3); // align value to 4
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3303      	adds	r3, #3
 8000224:	f023 0303 	bic.w	r3, r3, #3
 8000228:	607b      	str	r3, [r7, #4]
	if (current_heap_end + incr > &_Heap_Limit) {
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <_sbrk+0x5c>)
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4413      	add	r3, r2
 8000232:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <_sbrk+0x64>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d907      	bls.n	8000248 <_sbrk+0x44>
      _write (1, "_sbrk: Heap and stack collision\n", 32);

      abort ();
#else
		// Heap has overflowed
		errno = ENOMEM;
 8000238:	f002 fa4c 	bl	80026d4 <__errno>
 800023c:	4602      	mov	r2, r0
 800023e:	230c      	movs	r3, #12
 8000240:	6013      	str	r3, [r2, #0]
		return (caddr_t) - 1;
 8000242:	f04f 33ff 	mov.w	r3, #4294967295
 8000246:	e006      	b.n	8000256 <_sbrk+0x52>
#endif
	}

	current_heap_end += incr;
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <_sbrk+0x5c>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4413      	add	r3, r2
 8000250:	4a03      	ldr	r2, [pc, #12]	; (8000260 <_sbrk+0x5c>)
 8000252:	6013      	str	r3, [r2, #0]

	return (caddr_t) current_block_address;
 8000254:	68fb      	ldr	r3, [r7, #12]
}
 8000256:	4618      	mov	r0, r3
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000080 	.word	0x20000080
 8000264:	200008c0 	.word	0x200008c0
 8000268:	200018c0 	.word	0x200018c0

0800026c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	f003 021f 	and.w	r2, r3, #31
 800027c:	4907      	ldr	r1, [pc, #28]	; (800029c <NVIC_EnableIRQ+0x30>)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	095b      	lsrs	r3, r3, #5
 8000284:	2001      	movs	r0, #1
 8000286:	fa00 f202 	lsl.w	r2, r0, r2
 800028a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000e100 	.word	0xe000e100

080002a0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f003 021f 	and.w	r2, r3, #31
 80002b0:	4907      	ldr	r1, [pc, #28]	; (80002d0 <NVIC_DisableIRQ+0x30>)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	095b      	lsrs	r3, r3, #5
 80002b8:	2001      	movs	r0, #1
 80002ba:	fa00 f202 	lsl.w	r2, r0, r2
 80002be:	3320      	adds	r3, #32
 80002c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	f003 021f 	and.w	r2, r3, #31
 80002e4:	4907      	ldr	r1, [pc, #28]	; (8000304 <NVIC_ClearPendingIRQ+0x30>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	095b      	lsrs	r3, r3, #5
 80002ec:	2001      	movs	r0, #1
 80002ee:	fa00 f202 	lsl.w	r2, r0, r2
 80002f2:	3360      	adds	r3, #96	; 0x60
 80002f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000e100 	.word	0xe000e100

08000308 <TIM2_IRQHandler>:
/**/

uint16_t ui16gUartTimeout = 0;

/* Not Used*/
void TIM2_IRQHandler() {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
	uint16_t ui16Temp;
	uint8_t ui8SingleData;

	if (TIM2->SR & TIM_SR_UIF) {
 800030e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000312:	691b      	ldr	r3, [r3, #16]
 8000314:	f003 0301 	and.w	r3, r3, #1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d038      	beq.n	800038e <TIM2_IRQHandler+0x86>
		ui16Temp = dGetQueueSize(stcQueueTx);
 800031c:	4b24      	ldr	r3, [pc, #144]	; (80003b0 <TIM2_IRQHandler+0xa8>)
 800031e:	88db      	ldrh	r3, [r3, #6]
 8000320:	80fb      	strh	r3, [r7, #6]
		if (ui16Temp > 0) {
 8000322:	88fb      	ldrh	r3, [r7, #6]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d02a      	beq.n	800037e <TIM2_IRQHandler+0x76>
			if (USART2->SR & USART_SR_TXE) {
 8000328:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <TIM2_IRQHandler+0xac>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000330:	2b00      	cmp	r3, #0
 8000332:	d024      	beq.n	800037e <TIM2_IRQHandler+0x76>
				dRemoveByteFromQueue(stcQueueTx, ui8SingleData);
 8000334:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <TIM2_IRQHandler+0xa8>)
 8000336:	88db      	ldrh	r3, [r3, #6]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d101      	bne.n	8000340 <TIM2_IRQHandler+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033c:	b672      	cpsid	i
 800033e:	e7fe      	b.n	800033e <TIM2_IRQHandler+0x36>
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <TIM2_IRQHandler+0xa8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a1a      	ldr	r2, [pc, #104]	; (80003b0 <TIM2_IRQHandler+0xa8>)
 8000346:	8912      	ldrh	r2, [r2, #8]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	717b      	strb	r3, [r7, #5]
 800034e:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <TIM2_IRQHandler+0xa8>)
 8000350:	88db      	ldrh	r3, [r3, #6]
 8000352:	3b01      	subs	r3, #1
 8000354:	b29a      	uxth	r2, r3
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <TIM2_IRQHandler+0xa8>)
 8000358:	80da      	strh	r2, [r3, #6]
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <TIM2_IRQHandler+0xa8>)
 800035c:	891b      	ldrh	r3, [r3, #8]
 800035e:	3301      	adds	r3, #1
 8000360:	b29b      	uxth	r3, r3
 8000362:	b21a      	sxth	r2, r3
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <TIM2_IRQHandler+0xa8>)
 8000366:	889b      	ldrh	r3, [r3, #4]
 8000368:	3b01      	subs	r3, #1
 800036a:	b29b      	uxth	r3, r3
 800036c:	b21b      	sxth	r3, r3
 800036e:	4013      	ands	r3, r2
 8000370:	b21b      	sxth	r3, r3
 8000372:	b29a      	uxth	r2, r3
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <TIM2_IRQHandler+0xa8>)
 8000376:	811a      	strh	r2, [r3, #8]
				USART2->DR = ui8SingleData;
 8000378:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <TIM2_IRQHandler+0xac>)
 800037a:	797b      	ldrb	r3, [r7, #5]
 800037c:	6053      	str	r3, [r2, #4]
			}

		}

		TIM2->SR &= ~(TIM_SR_UIF);
 800037e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000382:	691b      	ldr	r3, [r3, #16]
 8000384:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000388:	f023 0301 	bic.w	r3, r3, #1
 800038c:	6113      	str	r3, [r2, #16]
	}

	if(ui16gUartTimeout>0){
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <TIM2_IRQHandler+0xb0>)
 8000390:	881b      	ldrh	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <TIM2_IRQHandler+0x9a>
		--ui16gUartTimeout;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <TIM2_IRQHandler+0xb0>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	3b01      	subs	r3, #1
 800039c:	b29a      	uxth	r2, r3
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <TIM2_IRQHandler+0xb0>)
 80003a0:	801a      	strh	r2, [r3, #0]
	}
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	200004ac 	.word	0x200004ac
 80003b4:	40004400 	.word	0x40004400
 80003b8:	20000084 	.word	0x20000084

080003bc <USART2_IRQHandler>:
;

/* Receive Rx Interrupts*/
void USART2_IRQHandler() {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

	// Is there is new data, put it into queue
	// Bit is cleared by reading DR
	if (USART2->SR & USART_SR_RXNE) {
 80003c0:	4b19      	ldr	r3, [pc, #100]	; (8000428 <USART2_IRQHandler+0x6c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f003 0320 	and.w	r3, r3, #32
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d02b      	beq.n	8000424 <USART2_IRQHandler+0x68>
		dPutByteIntoQueue(stcQueueRx, USART2->DR);
 80003cc:	4b17      	ldr	r3, [pc, #92]	; (800042c <USART2_IRQHandler+0x70>)
 80003ce:	88da      	ldrh	r2, [r3, #6]
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <USART2_IRQHandler+0x70>)
 80003d2:	889b      	ldrh	r3, [r3, #4]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d301      	bcc.n	80003dc <USART2_IRQHandler+0x20>
 80003d8:	b672      	cpsid	i
 80003da:	e7fe      	b.n	80003da <USART2_IRQHandler+0x1e>
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <USART2_IRQHandler+0x6c>)
 80003de:	6859      	ldr	r1, [r3, #4]
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <USART2_IRQHandler+0x70>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <USART2_IRQHandler+0x70>)
 80003e6:	8952      	ldrh	r2, [r2, #10]
 80003e8:	4413      	add	r3, r2
 80003ea:	b2ca      	uxtb	r2, r1
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <USART2_IRQHandler+0x70>)
 80003f0:	895b      	ldrh	r3, [r3, #10]
 80003f2:	3301      	adds	r3, #1
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	b21a      	sxth	r2, r3
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <USART2_IRQHandler+0x70>)
 80003fa:	889b      	ldrh	r3, [r3, #4]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	b29b      	uxth	r3, r3
 8000400:	b21b      	sxth	r3, r3
 8000402:	4013      	ands	r3, r2
 8000404:	b21b      	sxth	r3, r3
 8000406:	b29a      	uxth	r2, r3
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <USART2_IRQHandler+0x70>)
 800040a:	815a      	strh	r2, [r3, #10]
 800040c:	201c      	movs	r0, #28
 800040e:	f7ff ff47 	bl	80002a0 <NVIC_DisableIRQ>
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <USART2_IRQHandler+0x70>)
 8000414:	88db      	ldrh	r3, [r3, #6]
 8000416:	3301      	adds	r3, #1
 8000418:	b29a      	uxth	r2, r3
 800041a:	4b04      	ldr	r3, [pc, #16]	; (800042c <USART2_IRQHandler+0x70>)
 800041c:	80da      	strh	r2, [r3, #6]
 800041e:	201c      	movs	r0, #28
 8000420:	f7ff ff24 	bl	800026c <NVIC_EnableIRQ>
	}
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40004400 	.word	0x40004400
 800042c:	200004a0 	.word	0x200004a0

08000430 <vInitializePeripherals>:

/* Initialize Clocks, Pins and Func. Units*/
void vInitializePeripherals() {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	// GPIO Clocks
	//----------------------------------
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000434:	4b3e      	ldr	r3, [pc, #248]	; (8000530 <vInitializePeripherals+0x100>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a3d      	ldr	r2, [pc, #244]	; (8000530 <vInitializePeripherals+0x100>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000440:	4b3b      	ldr	r3, [pc, #236]	; (8000530 <vInitializePeripherals+0x100>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000444:	4a3a      	ldr	r2, [pc, #232]	; (8000530 <vInitializePeripherals+0x100>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	6313      	str	r3, [r2, #48]	; 0x30

	// Debug Pin
	//---------------------------------
	GPIOC->MODER |= GPIO_MODER_MODE10_0;	// Out
 800044c:	4b39      	ldr	r3, [pc, #228]	; (8000534 <vInitializePeripherals+0x104>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a38      	ldr	r2, [pc, #224]	; (8000534 <vInitializePeripherals+0x104>)
 8000452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000456:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BS10;
 8000458:	4b36      	ldr	r3, [pc, #216]	; (8000534 <vInitializePeripherals+0x104>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a35      	ldr	r2, [pc, #212]	; (8000534 <vInitializePeripherals+0x104>)
 800045e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000462:	6193      	str	r3, [r2, #24]

	// Uart
	//-----------------------------
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; 	// 16 Mhz not divided for PCLK1 and PCLK2
 8000464:	4b32      	ldr	r3, [pc, #200]	; (8000530 <vInitializePeripherals+0x100>)
 8000466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000468:	4a31      	ldr	r2, [pc, #196]	; (8000530 <vInitializePeripherals+0x100>)
 800046a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046e:	6413      	str	r3, [r2, #64]	; 0x40
	GPIOA->MODER &= ~(GPIO_MODER_MODE3 | GPIO_MODER_MODE2);
 8000470:	4b31      	ldr	r3, [pc, #196]	; (8000538 <vInitializePeripherals+0x108>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a30      	ldr	r2, [pc, #192]	; (8000538 <vInitializePeripherals+0x108>)
 8000476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800047a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE3_1 | GPIO_MODER_MODE2_1;					// Alternative function for TX and RX
 800047c:	4b2e      	ldr	r3, [pc, #184]	; (8000538 <vInitializePeripherals+0x108>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a2d      	ldr	r2, [pc, #180]	; (8000538 <vInitializePeripherals+0x108>)
 8000482:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000486:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR2 | GPIO_OSPEEDER_OSPEEDR3);			// Max speed
 8000488:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <vInitializePeripherals+0x108>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	4a2a      	ldr	r2, [pc, #168]	; (8000538 <vInitializePeripherals+0x108>)
 800048e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000492:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] = GPIO_AFRL_AFSEL3_0 | GPIO_AFRL_AFSEL3_1 | GPIO_AFRL_AFSEL3_2;
 8000494:	4b28      	ldr	r3, [pc, #160]	; (8000538 <vInitializePeripherals+0x108>)
 8000496:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800049a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL2_0 | GPIO_AFRL_AFSEL2_1 | GPIO_AFRL_AFSEL2_2;
 800049c:	4b26      	ldr	r3, [pc, #152]	; (8000538 <vInitializePeripherals+0x108>)
 800049e:	6a1b      	ldr	r3, [r3, #32]
 80004a0:	4a25      	ldr	r2, [pc, #148]	; (8000538 <vInitializePeripherals+0x108>)
 80004a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004a6:	6213      	str	r3, [r2, #32]

	// Baud Calculation
	// Baud = Clock/(8 x (2-OVER8) x USARTDIV )  ->
	USART2->BRR = (((uint32_t) 16000000) / (115200));
 80004a8:	4b24      	ldr	r3, [pc, #144]	; (800053c <vInitializePeripherals+0x10c>)
 80004aa:	228a      	movs	r2, #138	; 0x8a
 80004ac:	609a      	str	r2, [r3, #8]
	USART2->CR1 = 0 | USART_CR1_TE | USART_CR1_RE;	// Enable Communication
 80004ae:	4b23      	ldr	r3, [pc, #140]	; (800053c <vInitializePeripherals+0x10c>)
 80004b0:	220c      	movs	r2, #12
 80004b2:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;				// Enable RX Interrupt
 80004b4:	4b21      	ldr	r3, [pc, #132]	; (800053c <vInitializePeripherals+0x10c>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	4a20      	ldr	r2, [pc, #128]	; (800053c <vInitializePeripherals+0x10c>)
 80004ba:	f043 0320 	orr.w	r3, r3, #32
 80004be:	60d3      	str	r3, [r2, #12]

	NVIC_ClearPendingIRQ(USART2_IRQn);
 80004c0:	2026      	movs	r0, #38	; 0x26
 80004c2:	f7ff ff07 	bl	80002d4 <NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(USART2_IRQn);
 80004c6:	2026      	movs	r0, #38	; 0x26
 80004c8:	f7ff fed0 	bl	800026c <NVIC_EnableIRQ>

	USART2->CR1 |= USART_CR1_UE;					// Enable Uart
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <vInitializePeripherals+0x10c>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a1a      	ldr	r2, [pc, #104]	; (800053c <vInitializePeripherals+0x10c>)
 80004d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004d6:	60d3      	str	r3, [r2, #12]

	// TIM2
	//--------------------------------
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <vInitializePeripherals+0x100>)
 80004da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <vInitializePeripherals+0x100>)
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->CR1 = 0 | TIM_CR1_DIR;	// Count down
 80004e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e8:	2210      	movs	r2, #16
 80004ea:	601a      	str	r2, [r3, #0]
	TIM2->CNT = 0;
 80004ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f0:	2200      	movs	r2, #0
 80004f2:	625a      	str	r2, [r3, #36]	; 0x24

	TIM2->PSC = 16;
 80004f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f8:	2210      	movs	r2, #16
 80004fa:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1000;
 80004fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;		// 1 ms Timer
 8000506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6013      	str	r3, [r2, #0]

	NVIC_ClearPendingIRQ(TIM2_IRQn);
 8000516:	201c      	movs	r0, #28
 8000518:	f7ff fedc 	bl	80002d4 <NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);
 800051c:	201c      	movs	r0, #28
 800051e:	f7ff fea5 	bl	800026c <NVIC_EnableIRQ>

	TIM2->DIER = 0 | TIM_DIER_UIE;
 8000522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000526:	2201      	movs	r2, #1
 8000528:	60da      	str	r2, [r3, #12]

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40023800 	.word	0x40023800
 8000534:	40020800 	.word	0x40020800
 8000538:	40020000 	.word	0x40020000
 800053c:	40004400 	.word	0x40004400

08000540 <main>:

int main() {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b08e      	sub	sp, #56	; 0x38
 8000544:	af02      	add	r7, sp, #8
	uint16_t ui16RxBufferOffset = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t ui8TempRxByteCount;
	uint8_t arrui8QrcodeData[qrcode_getBufferSize(QRCODE_VERSION)];
 800054a:	2003      	movs	r0, #3
 800054c:	f001 ff08 	bl	8002360 <qrcode_getBufferSize>
 8000550:	4603      	mov	r3, r0
 8000552:	461d      	mov	r5, r3
 8000554:	462b      	mov	r3, r5
 8000556:	3b01      	subs	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	b2a9      	uxth	r1, r5
 800055c:	f04f 0200 	mov.w	r2, #0
 8000560:	f04f 0300 	mov.w	r3, #0
 8000564:	f04f 0400 	mov.w	r4, #0
 8000568:	00d4      	lsls	r4, r2, #3
 800056a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800056e:	00cb      	lsls	r3, r1, #3
 8000570:	b2a9      	uxth	r1, r5
 8000572:	f04f 0200 	mov.w	r2, #0
 8000576:	f04f 0300 	mov.w	r3, #0
 800057a:	f04f 0400 	mov.w	r4, #0
 800057e:	00d4      	lsls	r4, r2, #3
 8000580:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000584:	00cb      	lsls	r3, r1, #3
 8000586:	462b      	mov	r3, r5
 8000588:	3307      	adds	r3, #7
 800058a:	08db      	lsrs	r3, r3, #3
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	ebad 0d03 	sub.w	sp, sp, r3
 8000592:	ab02      	add	r3, sp, #8
 8000594:	3300      	adds	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
	QRCode stcQrcode;

	memset(arrui8QrcodeData, 0, sizeof(arrui8QrcodeData));
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	462a      	mov	r2, r5
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 f8dd 	bl	800275e <memset>
	dInitQueue(stcQueueRx, arrui8QueueBufferRx, sizeof(arrui8QueueBufferRx));	// Queues
 80005a4:	4b9e      	ldr	r3, [pc, #632]	; (8000820 <main+0x2e0>)
 80005a6:	4a9f      	ldr	r2, [pc, #636]	; (8000824 <main+0x2e4>)
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	4b9d      	ldr	r3, [pc, #628]	; (8000820 <main+0x2e0>)
 80005ac:	2210      	movs	r2, #16
 80005ae:	809a      	strh	r2, [r3, #4]
 80005b0:	4b9b      	ldr	r3, [pc, #620]	; (8000820 <main+0x2e0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	811a      	strh	r2, [r3, #8]
 80005b6:	4b9a      	ldr	r3, [pc, #616]	; (8000820 <main+0x2e0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	815a      	strh	r2, [r3, #10]
 80005bc:	4b98      	ldr	r3, [pc, #608]	; (8000820 <main+0x2e0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	80da      	strh	r2, [r3, #6]
	dInitQueue(stcQueueTx, arrui8QueueBufferTx, sizeof(arrui8QueueBufferTx));
 80005c2:	4b99      	ldr	r3, [pc, #612]	; (8000828 <main+0x2e8>)
 80005c4:	4a99      	ldr	r2, [pc, #612]	; (800082c <main+0x2ec>)
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	4b97      	ldr	r3, [pc, #604]	; (8000828 <main+0x2e8>)
 80005ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ce:	809a      	strh	r2, [r3, #4]
 80005d0:	4b95      	ldr	r3, [pc, #596]	; (8000828 <main+0x2e8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	811a      	strh	r2, [r3, #8]
 80005d6:	4b94      	ldr	r3, [pc, #592]	; (8000828 <main+0x2e8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	815a      	strh	r2, [r3, #10]
 80005dc:	4b92      	ldr	r3, [pc, #584]	; (8000828 <main+0x2e8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	80da      	strh	r2, [r3, #6]
	vInitializePeripherals();			// Periphs
 80005e2:	f7ff ff25 	bl	8000430 <vInitializePeripherals>
		 }
		 dWrite('\n');
	 }
	}*/

	uint16_t ui16ParserState = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint8_t * pui8CurrentData = NULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t ui8Length = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (1) {

		ui8TempRxByteCount = dGetQueueSize(stcQueueRx);
 80005f4:	4b8a      	ldr	r3, [pc, #552]	; (8000820 <main+0x2e0>)
 80005f6:	88db      	ldrh	r3, [r3, #6]
 80005f8:	73fb      	strb	r3, [r7, #15]

		// Parser State Machine
		switch (ui16ParserState) {
 80005fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80005fc:	2b0a      	cmp	r3, #10
 80005fe:	f200 8125 	bhi.w	800084c <main+0x30c>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <main+0xc8>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000635 	.word	0x08000635
 800060c:	080006b3 	.word	0x080006b3
 8000610:	08000835 	.word	0x08000835
 8000614:	0800084d 	.word	0x0800084d
 8000618:	0800084d 	.word	0x0800084d
 800061c:	0800084d 	.word	0x0800084d
 8000620:	0800084d 	.word	0x0800084d
 8000624:	0800084d 	.word	0x0800084d
 8000628:	0800084d 	.word	0x0800084d
 800062c:	0800084d 	.word	0x0800084d
 8000630:	08000861 	.word	0x08000861
		case INIT:
			if (ui8TempRxByteCount > 0) {
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b00      	cmp	r3, #0
 8000638:	f000 823e 	beq.w	8000ab8 <main+0x578>

				ui16gUartTimeout = 2000;	// Timeout is 2 seconds
 800063c:	4b7c      	ldr	r3, [pc, #496]	; (8000830 <main+0x2f0>)
 800063e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000642:	801a      	strh	r2, [r3, #0]
				dPeekFirstByte(stcQueueRx, ui8Length);
 8000644:	4b76      	ldr	r3, [pc, #472]	; (8000820 <main+0x2e0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a75      	ldr	r2, [pc, #468]	; (8000820 <main+0x2e0>)
 800064a:	8912      	ldrh	r2, [r2, #8]
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				// if Valid Length: there has ben at least one byte payload
				if (ui8Length > 4) {
 8000654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000658:	2b04      	cmp	r3, #4
 800065a:	d90f      	bls.n	800067c <main+0x13c>
					pui8CurrentData = malloc(ui8Length);		// create a bit of space for length and cmd
 800065c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000660:	4618      	mov	r0, r3
 8000662:	f002 f861 	bl	8002728 <malloc>
 8000666:	4603      	mov	r3, r0
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28

					dAssert(pui8CurrentData != NULL);
 800066a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <main+0x134>
 8000670:	b672      	cpsid	i
 8000672:	e7fe      	b.n	8000672 <main+0x132>
					++ui16ParserState;
 8000674:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000676:	3301      	adds	r3, #1
 8000678:	85fb      	strh	r3, [r7, #46]	; 0x2e

				} else {
					dClearQueue(stcQueueRx);
				}
			}
			break;
 800067a:	e21d      	b.n	8000ab8 <main+0x578>
					dClearQueue(stcQueueRx);
 800067c:	2026      	movs	r0, #38	; 0x26
 800067e:	f7ff fe0f 	bl	80002a0 <NVIC_DisableIRQ>
 8000682:	4b67      	ldr	r3, [pc, #412]	; (8000820 <main+0x2e0>)
 8000684:	891a      	ldrh	r2, [r3, #8]
 8000686:	4b66      	ldr	r3, [pc, #408]	; (8000820 <main+0x2e0>)
 8000688:	88db      	ldrh	r3, [r3, #6]
 800068a:	4413      	add	r3, r2
 800068c:	b29b      	uxth	r3, r3
 800068e:	b21a      	sxth	r2, r3
 8000690:	4b63      	ldr	r3, [pc, #396]	; (8000820 <main+0x2e0>)
 8000692:	889b      	ldrh	r3, [r3, #4]
 8000694:	3b01      	subs	r3, #1
 8000696:	b29b      	uxth	r3, r3
 8000698:	b21b      	sxth	r3, r3
 800069a:	4013      	ands	r3, r2
 800069c:	b21b      	sxth	r3, r3
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b5f      	ldr	r3, [pc, #380]	; (8000820 <main+0x2e0>)
 80006a2:	811a      	strh	r2, [r3, #8]
 80006a4:	4b5e      	ldr	r3, [pc, #376]	; (8000820 <main+0x2e0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	80da      	strh	r2, [r3, #6]
 80006aa:	2026      	movs	r0, #38	; 0x26
 80006ac:	f7ff fdde 	bl	800026c <NVIC_EnableIRQ>
			break;
 80006b0:	e202      	b.n	8000ab8 <main+0x578>

			// Reception
		case RECEIVE:
			if (ui8TempRxByteCount > 0) {
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	f000 8201 	beq.w	8000abc <main+0x57c>

				// Check how many bytes are left
				// if There are more than we need then we receive only as much as we need
				if (ui8TempRxByteCount >= ui8Length) {
 80006ba:	7bfa      	ldrb	r2, [r7, #15]
 80006bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d354      	bcc.n	800076e <main+0x22e>
					dRemoveFromQueue(stcQueueRx, pui8CurrentData, ui16RxBufferOffset, ui8Length);
 80006c4:	4b56      	ldr	r3, [pc, #344]	; (8000820 <main+0x2e0>)
 80006c6:	88da      	ldrh	r2, [r3, #6]
 80006c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d201      	bcs.n	80006d6 <main+0x196>
 80006d2:	b672      	cpsid	i
 80006d4:	e7fe      	b.n	80006d4 <main+0x194>
 80006d6:	2300      	movs	r3, #0
 80006d8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80006da:	4b51      	ldr	r3, [pc, #324]	; (8000820 <main+0x2e0>)
 80006dc:	891b      	ldrh	r3, [r3, #8]
 80006de:	847b      	strh	r3, [r7, #34]	; 0x22
 80006e0:	e01a      	b.n	8000718 <main+0x1d8>
 80006e2:	4b4f      	ldr	r3, [pc, #316]	; (8000820 <main+0x2e0>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80006e8:	441a      	add	r2, r3
 80006ea:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80006ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006ee:	440b      	add	r3, r1
 80006f0:	4619      	mov	r1, r3
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	440b      	add	r3, r1
 80006f6:	7812      	ldrb	r2, [r2, #0]
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006fc:	3301      	adds	r3, #1
 80006fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000700:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000702:	3301      	adds	r3, #1
 8000704:	b29b      	uxth	r3, r3
 8000706:	b21a      	sxth	r2, r3
 8000708:	4b45      	ldr	r3, [pc, #276]	; (8000820 <main+0x2e0>)
 800070a:	889b      	ldrh	r3, [r3, #4]
 800070c:	3b01      	subs	r3, #1
 800070e:	b29b      	uxth	r3, r3
 8000710:	b21b      	sxth	r3, r3
 8000712:	4013      	ands	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	847b      	strh	r3, [r7, #34]	; 0x22
 8000718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800071c:	b29b      	uxth	r3, r3
 800071e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000720:	429a      	cmp	r2, r3
 8000722:	d3de      	bcc.n	80006e2 <main+0x1a2>
 8000724:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <main+0x2e0>)
 8000726:	891a      	ldrh	r2, [r3, #8]
 8000728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800072c:	b29b      	uxth	r3, r3
 800072e:	4413      	add	r3, r2
 8000730:	b29b      	uxth	r3, r3
 8000732:	b21a      	sxth	r2, r3
 8000734:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <main+0x2e0>)
 8000736:	889b      	ldrh	r3, [r3, #4]
 8000738:	3b01      	subs	r3, #1
 800073a:	b29b      	uxth	r3, r3
 800073c:	b21b      	sxth	r3, r3
 800073e:	4013      	ands	r3, r2
 8000740:	b21b      	sxth	r3, r3
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b36      	ldr	r3, [pc, #216]	; (8000820 <main+0x2e0>)
 8000746:	811a      	strh	r2, [r3, #8]
 8000748:	2026      	movs	r0, #38	; 0x26
 800074a:	f7ff fda9 	bl	80002a0 <NVIC_DisableIRQ>
 800074e:	4b34      	ldr	r3, [pc, #208]	; (8000820 <main+0x2e0>)
 8000750:	88da      	ldrh	r2, [r3, #6]
 8000752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000756:	b29b      	uxth	r3, r3
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	b29a      	uxth	r2, r3
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <main+0x2e0>)
 800075e:	80da      	strh	r2, [r3, #6]
 8000760:	2026      	movs	r0, #38	; 0x26
 8000762:	f7ff fd83 	bl	800026c <NVIC_EnableIRQ>
					++ui16ParserState;
 8000766:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000768:	3301      	adds	r3, #1
 800076a:	85fb      	strh	r3, [r7, #46]	; 0x2e
					ui8Length -= ui8TempRxByteCount;
					dRemoveFromQueue(stcQueueRx, pui8CurrentData, ui16RxBufferOffset, ui8TempRxByteCount);
					ui16RxBufferOffset += ui8TempRxByteCount;
				}
			}
			break;
 800076c:	e1a6      	b.n	8000abc <main+0x57c>
					ui8Length -= ui8TempRxByteCount;
 800076e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					dRemoveFromQueue(stcQueueRx, pui8CurrentData, ui16RxBufferOffset, ui8TempRxByteCount);
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <main+0x2e0>)
 800077c:	88da      	ldrh	r2, [r3, #6]
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	b29b      	uxth	r3, r3
 8000782:	429a      	cmp	r2, r3
 8000784:	d201      	bcs.n	800078a <main+0x24a>
 8000786:	b672      	cpsid	i
 8000788:	e7fe      	b.n	8000788 <main+0x248>
 800078a:	2300      	movs	r3, #0
 800078c:	843b      	strh	r3, [r7, #32]
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <main+0x2e0>)
 8000790:	891b      	ldrh	r3, [r3, #8]
 8000792:	83fb      	strh	r3, [r7, #30]
 8000794:	e01a      	b.n	80007cc <main+0x28c>
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <main+0x2e0>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	8bfb      	ldrh	r3, [r7, #30]
 800079c:	441a      	add	r2, r3
 800079e:	8c39      	ldrh	r1, [r7, #32]
 80007a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007a2:	440b      	add	r3, r1
 80007a4:	4619      	mov	r1, r3
 80007a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a8:	440b      	add	r3, r1
 80007aa:	7812      	ldrb	r2, [r2, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	8c3b      	ldrh	r3, [r7, #32]
 80007b0:	3301      	adds	r3, #1
 80007b2:	843b      	strh	r3, [r7, #32]
 80007b4:	8bfb      	ldrh	r3, [r7, #30]
 80007b6:	3301      	adds	r3, #1
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <main+0x2e0>)
 80007be:	889b      	ldrh	r3, [r3, #4]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	4013      	ands	r3, r2
 80007c8:	b21b      	sxth	r3, r3
 80007ca:	83fb      	strh	r3, [r7, #30]
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	8c3a      	ldrh	r2, [r7, #32]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d3df      	bcc.n	8000796 <main+0x256>
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <main+0x2e0>)
 80007d8:	891a      	ldrh	r2, [r3, #8]
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	4413      	add	r3, r2
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <main+0x2e0>)
 80007e6:	889b      	ldrh	r3, [r3, #4]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	4013      	ands	r3, r2
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <main+0x2e0>)
 80007f6:	811a      	strh	r2, [r3, #8]
 80007f8:	2026      	movs	r0, #38	; 0x26
 80007fa:	f7ff fd51 	bl	80002a0 <NVIC_DisableIRQ>
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <main+0x2e0>)
 8000800:	88da      	ldrh	r2, [r3, #6]
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	b29b      	uxth	r3, r3
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <main+0x2e0>)
 800080c:	80da      	strh	r2, [r3, #6]
 800080e:	2026      	movs	r0, #38	; 0x26
 8000810:	f7ff fd2c 	bl	800026c <NVIC_EnableIRQ>
					ui16RxBufferOffset += ui8TempRxByteCount;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	b29a      	uxth	r2, r3
 8000818:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800081a:	4413      	add	r3, r2
 800081c:	85bb      	strh	r3, [r7, #44]	; 0x2c
			break;
 800081e:	e14d      	b.n	8000abc <main+0x57c>
 8000820:	200004a0 	.word	0x200004a0
 8000824:	20000490 	.word	0x20000490
 8000828:	200004ac 	.word	0x200004ac
 800082c:	20000090 	.word	0x20000090
 8000830:	20000084 	.word	0x20000084

			// Jump to command
		case VALIDATE:
			ui16ParserState = dReceivedCommand(pui8CurrentData) >= CMD_GENERATE_QR ? dReceivedCommand(pui8CurrentData) : CLEANUP;	// Validate command
 8000834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000836:	3301      	adds	r3, #1
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	2b09      	cmp	r3, #9
 800083c:	d903      	bls.n	8000846 <main+0x306>
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000844:	e000      	b.n	8000848 <main+0x308>
 8000846:	2303      	movs	r3, #3
 8000848:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 800084a:	e138      	b.n	8000abe <main+0x57e>

			// done
		case CLEANUP:
		default:
			free(pui8CurrentData);
 800084c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800084e:	f001 ff73 	bl	8002738 <free>
			ui16RxBufferOffset = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	85bb      	strh	r3, [r7, #44]	; 0x2c
			ui16ParserState = INIT;
 8000856:	2300      	movs	r3, #0
 8000858:	85fb      	strh	r3, [r7, #46]	; 0x2e
			pui8CurrentData = NULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800085e:	e12e      	b.n	8000abe <main+0x57e>

			// Commands
		case CMD_GENERATE_QR:
			qrcode_initBytes(&stcQrcode, arrui8QrcodeData, QRCODE_VERSION, 0, &pui8CurrentData[3],
 8000860:	6939      	ldr	r1, [r7, #16]
 8000862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000864:	3303      	adds	r3, #3
			dReceivedLength(pui8CurrentData) - 4);		// Generate qrcode for payload minus checksum
 8000866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000868:	7812      	ldrb	r2, [r2, #0]
 800086a:	b292      	uxth	r2, r2
			qrcode_initBytes(&stcQrcode, arrui8QrcodeData, QRCODE_VERSION, 0, &pui8CurrentData[3],
 800086c:	3a04      	subs	r2, #4
 800086e:	b292      	uxth	r2, r2
 8000870:	4638      	mov	r0, r7
 8000872:	9201      	str	r2, [sp, #4]
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2300      	movs	r3, #0
 8000878:	2203      	movs	r2, #3
 800087a:	f001 fd83 	bl	8002384 <qrcode_initBytes>

			ui8Length = sizeof(arrui8QrcodeData) + 1 + 4;		// Calculate size of the frame length + command + qrsize + qrarray
 800087e:	b2eb      	uxtb	r3, r5
 8000880:	3305      	adds	r3, #5
 8000882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			dPutByteIntoQueue(stcQueueTx, ui8Length)
 8000886:	4b94      	ldr	r3, [pc, #592]	; (8000ad8 <main+0x598>)
 8000888:	88da      	ldrh	r2, [r3, #6]
 800088a:	4b93      	ldr	r3, [pc, #588]	; (8000ad8 <main+0x598>)
 800088c:	889b      	ldrh	r3, [r3, #4]
 800088e:	429a      	cmp	r2, r3
 8000890:	d301      	bcc.n	8000896 <main+0x356>
 8000892:	b672      	cpsid	i
 8000894:	e7fe      	b.n	8000894 <main+0x354>
 8000896:	4b90      	ldr	r3, [pc, #576]	; (8000ad8 <main+0x598>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a8f      	ldr	r2, [pc, #572]	; (8000ad8 <main+0x598>)
 800089c:	8952      	ldrh	r2, [r2, #10]
 800089e:	4413      	add	r3, r2
 80008a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	4b8c      	ldr	r3, [pc, #560]	; (8000ad8 <main+0x598>)
 80008a8:	895b      	ldrh	r3, [r3, #10]
 80008aa:	3301      	adds	r3, #1
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	4b89      	ldr	r3, [pc, #548]	; (8000ad8 <main+0x598>)
 80008b2:	889b      	ldrh	r3, [r3, #4]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4013      	ands	r3, r2
 80008bc:	b21b      	sxth	r3, r3
 80008be:	b29a      	uxth	r2, r3
 80008c0:	4b85      	ldr	r3, [pc, #532]	; (8000ad8 <main+0x598>)
 80008c2:	815a      	strh	r2, [r3, #10]
 80008c4:	201c      	movs	r0, #28
 80008c6:	f7ff fceb 	bl	80002a0 <NVIC_DisableIRQ>
 80008ca:	4b83      	ldr	r3, [pc, #524]	; (8000ad8 <main+0x598>)
 80008cc:	88db      	ldrh	r3, [r3, #6]
 80008ce:	3301      	adds	r3, #1
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b81      	ldr	r3, [pc, #516]	; (8000ad8 <main+0x598>)
 80008d4:	80da      	strh	r2, [r3, #6]
 80008d6:	201c      	movs	r0, #28
 80008d8:	f7ff fcc8 	bl	800026c <NVIC_EnableIRQ>
			;
			dPutByteIntoQueue(stcQueueTx, 0)
 80008dc:	4b7e      	ldr	r3, [pc, #504]	; (8000ad8 <main+0x598>)
 80008de:	88da      	ldrh	r2, [r3, #6]
 80008e0:	4b7d      	ldr	r3, [pc, #500]	; (8000ad8 <main+0x598>)
 80008e2:	889b      	ldrh	r3, [r3, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d301      	bcc.n	80008ec <main+0x3ac>
 80008e8:	b672      	cpsid	i
 80008ea:	e7fe      	b.n	80008ea <main+0x3aa>
 80008ec:	4b7a      	ldr	r3, [pc, #488]	; (8000ad8 <main+0x598>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a79      	ldr	r2, [pc, #484]	; (8000ad8 <main+0x598>)
 80008f2:	8952      	ldrh	r2, [r2, #10]
 80008f4:	4413      	add	r3, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	4b77      	ldr	r3, [pc, #476]	; (8000ad8 <main+0x598>)
 80008fc:	895b      	ldrh	r3, [r3, #10]
 80008fe:	3301      	adds	r3, #1
 8000900:	b29b      	uxth	r3, r3
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b74      	ldr	r3, [pc, #464]	; (8000ad8 <main+0x598>)
 8000906:	889b      	ldrh	r3, [r3, #4]
 8000908:	3b01      	subs	r3, #1
 800090a:	b29b      	uxth	r3, r3
 800090c:	b21b      	sxth	r3, r3
 800090e:	4013      	ands	r3, r2
 8000910:	b21b      	sxth	r3, r3
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b70      	ldr	r3, [pc, #448]	; (8000ad8 <main+0x598>)
 8000916:	815a      	strh	r2, [r3, #10]
 8000918:	201c      	movs	r0, #28
 800091a:	f7ff fcc1 	bl	80002a0 <NVIC_DisableIRQ>
 800091e:	4b6e      	ldr	r3, [pc, #440]	; (8000ad8 <main+0x598>)
 8000920:	88db      	ldrh	r3, [r3, #6]
 8000922:	3301      	adds	r3, #1
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b6c      	ldr	r3, [pc, #432]	; (8000ad8 <main+0x598>)
 8000928:	80da      	strh	r2, [r3, #6]
 800092a:	201c      	movs	r0, #28
 800092c:	f7ff fc9e 	bl	800026c <NVIC_EnableIRQ>
			;
			dPutByteIntoQueue(stcQueueTx, (uint8_t )CMD_GENERATE_QR)
 8000930:	4b69      	ldr	r3, [pc, #420]	; (8000ad8 <main+0x598>)
 8000932:	88da      	ldrh	r2, [r3, #6]
 8000934:	4b68      	ldr	r3, [pc, #416]	; (8000ad8 <main+0x598>)
 8000936:	889b      	ldrh	r3, [r3, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	d301      	bcc.n	8000940 <main+0x400>
 800093c:	b672      	cpsid	i
 800093e:	e7fe      	b.n	800093e <main+0x3fe>
 8000940:	4b65      	ldr	r3, [pc, #404]	; (8000ad8 <main+0x598>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a64      	ldr	r2, [pc, #400]	; (8000ad8 <main+0x598>)
 8000946:	8952      	ldrh	r2, [r2, #10]
 8000948:	4413      	add	r3, r2
 800094a:	220a      	movs	r2, #10
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	4b62      	ldr	r3, [pc, #392]	; (8000ad8 <main+0x598>)
 8000950:	895b      	ldrh	r3, [r3, #10]
 8000952:	3301      	adds	r3, #1
 8000954:	b29b      	uxth	r3, r3
 8000956:	b21a      	sxth	r2, r3
 8000958:	4b5f      	ldr	r3, [pc, #380]	; (8000ad8 <main+0x598>)
 800095a:	889b      	ldrh	r3, [r3, #4]
 800095c:	3b01      	subs	r3, #1
 800095e:	b29b      	uxth	r3, r3
 8000960:	b21b      	sxth	r3, r3
 8000962:	4013      	ands	r3, r2
 8000964:	b21b      	sxth	r3, r3
 8000966:	b29a      	uxth	r2, r3
 8000968:	4b5b      	ldr	r3, [pc, #364]	; (8000ad8 <main+0x598>)
 800096a:	815a      	strh	r2, [r3, #10]
 800096c:	201c      	movs	r0, #28
 800096e:	f7ff fc97 	bl	80002a0 <NVIC_DisableIRQ>
 8000972:	4b59      	ldr	r3, [pc, #356]	; (8000ad8 <main+0x598>)
 8000974:	88db      	ldrh	r3, [r3, #6]
 8000976:	3301      	adds	r3, #1
 8000978:	b29a      	uxth	r2, r3
 800097a:	4b57      	ldr	r3, [pc, #348]	; (8000ad8 <main+0x598>)
 800097c:	80da      	strh	r2, [r3, #6]
 800097e:	201c      	movs	r0, #28
 8000980:	f7ff fc74 	bl	800026c <NVIC_EnableIRQ>
			;

			dPutByteIntoQueue(stcQueueTx, stcQrcode.size)
 8000984:	4b54      	ldr	r3, [pc, #336]	; (8000ad8 <main+0x598>)
 8000986:	88da      	ldrh	r2, [r3, #6]
 8000988:	4b53      	ldr	r3, [pc, #332]	; (8000ad8 <main+0x598>)
 800098a:	889b      	ldrh	r3, [r3, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	d301      	bcc.n	8000994 <main+0x454>
 8000990:	b672      	cpsid	i
 8000992:	e7fe      	b.n	8000992 <main+0x452>
 8000994:	4b50      	ldr	r3, [pc, #320]	; (8000ad8 <main+0x598>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a4f      	ldr	r2, [pc, #316]	; (8000ad8 <main+0x598>)
 800099a:	8952      	ldrh	r2, [r2, #10]
 800099c:	4413      	add	r3, r2
 800099e:	787a      	ldrb	r2, [r7, #1]
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <main+0x598>)
 80009a4:	895b      	ldrh	r3, [r3, #10]
 80009a6:	3301      	adds	r3, #1
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	4b4a      	ldr	r3, [pc, #296]	; (8000ad8 <main+0x598>)
 80009ae:	889b      	ldrh	r3, [r3, #4]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	4013      	ands	r3, r2
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b46      	ldr	r3, [pc, #280]	; (8000ad8 <main+0x598>)
 80009be:	815a      	strh	r2, [r3, #10]
 80009c0:	201c      	movs	r0, #28
 80009c2:	f7ff fc6d 	bl	80002a0 <NVIC_DisableIRQ>
 80009c6:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <main+0x598>)
 80009c8:	88db      	ldrh	r3, [r3, #6]
 80009ca:	3301      	adds	r3, #1
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b42      	ldr	r3, [pc, #264]	; (8000ad8 <main+0x598>)
 80009d0:	80da      	strh	r2, [r3, #6]
 80009d2:	201c      	movs	r0, #28
 80009d4:	f7ff fc4a 	bl	800026c <NVIC_EnableIRQ>
			;
			dPutBufferIntoQueue(stcQueueTx, arrui8QrcodeData, sizeof(arrui8QrcodeData))
 80009d8:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <main+0x598>)
 80009da:	88db      	ldrh	r3, [r3, #6]
 80009dc:	461a      	mov	r2, r3
 80009de:	462b      	mov	r3, r5
 80009e0:	4413      	add	r3, r2
 80009e2:	4a3d      	ldr	r2, [pc, #244]	; (8000ad8 <main+0x598>)
 80009e4:	8892      	ldrh	r2, [r2, #4]
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d901      	bls.n	80009ee <main+0x4ae>
 80009ea:	b672      	cpsid	i
 80009ec:	e7fe      	b.n	80009ec <main+0x4ac>
 80009ee:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <main+0x598>)
 80009f0:	895b      	ldrh	r3, [r3, #10]
 80009f2:	83bb      	strh	r3, [r7, #28]
 80009f4:	2300      	movs	r3, #0
 80009f6:	837b      	strh	r3, [r7, #26]
 80009f8:	e016      	b.n	8000a28 <main+0x4e8>
 80009fa:	8b7a      	ldrh	r2, [r7, #26]
 80009fc:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <main+0x598>)
 80009fe:	6819      	ldr	r1, [r3, #0]
 8000a00:	8bbb      	ldrh	r3, [r7, #28]
 8000a02:	440b      	add	r3, r1
 8000a04:	6939      	ldr	r1, [r7, #16]
 8000a06:	5c8a      	ldrb	r2, [r1, r2]
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	8b7b      	ldrh	r3, [r7, #26]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	837b      	strh	r3, [r7, #26]
 8000a10:	8bbb      	ldrh	r3, [r7, #28]
 8000a12:	3301      	adds	r3, #1
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	b21a      	sxth	r2, r3
 8000a18:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <main+0x598>)
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4013      	ands	r3, r2
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	83bb      	strh	r3, [r7, #28]
 8000a28:	8b7b      	ldrh	r3, [r7, #26]
 8000a2a:	42ab      	cmp	r3, r5
 8000a2c:	d3e5      	bcc.n	80009fa <main+0x4ba>
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <main+0x598>)
 8000a30:	895b      	ldrh	r3, [r3, #10]
 8000a32:	442b      	add	r3, r5
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <main+0x598>)
 8000a38:	889b      	ldrh	r3, [r3, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4013      	ands	r3, r2
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <main+0x598>)
 8000a44:	815a      	strh	r2, [r3, #10]
 8000a46:	201c      	movs	r0, #28
 8000a48:	f7ff fc2a 	bl	80002a0 <NVIC_DisableIRQ>
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <main+0x598>)
 8000a4e:	88db      	ldrh	r3, [r3, #6]
 8000a50:	442b      	add	r3, r5
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <main+0x598>)
 8000a56:	80da      	strh	r2, [r3, #6]
 8000a58:	201c      	movs	r0, #28
 8000a5a:	f7ff fc07 	bl	800026c <NVIC_EnableIRQ>
			;

			dPutByteIntoQueue(stcQueueTx, 0x00)
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <main+0x598>)
 8000a60:	88da      	ldrh	r2, [r3, #6]
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <main+0x598>)
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d301      	bcc.n	8000a6e <main+0x52e>
 8000a6a:	b672      	cpsid	i
 8000a6c:	e7fe      	b.n	8000a6c <main+0x52c>
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <main+0x598>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <main+0x598>)
 8000a74:	8952      	ldrh	r2, [r2, #10]
 8000a76:	4413      	add	r3, r2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <main+0x598>)
 8000a7e:	895b      	ldrh	r3, [r3, #10]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b21a      	sxth	r2, r3
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <main+0x598>)
 8000a88:	889b      	ldrh	r3, [r3, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <main+0x598>)
 8000a98:	815a      	strh	r2, [r3, #10]
 8000a9a:	201c      	movs	r0, #28
 8000a9c:	f7ff fc00 	bl	80002a0 <NVIC_DisableIRQ>
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <main+0x598>)
 8000aa2:	88db      	ldrh	r3, [r3, #6]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <main+0x598>)
 8000aaa:	80da      	strh	r2, [r3, #6]
 8000aac:	201c      	movs	r0, #28
 8000aae:	f7ff fbdd 	bl	800026c <NVIC_EnableIRQ>
			;		// TODO Checksum of Payload

			ui16ParserState = CLEANUP;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	85fb      	strh	r3, [r7, #46]	; 0x2e
			break;
 8000ab6:	e002      	b.n	8000abe <main+0x57e>
			break;
 8000ab8:	bf00      	nop
 8000aba:	e000      	b.n	8000abe <main+0x57e>
			break;
 8000abc:	bf00      	nop
		}

		// Timeout here
		// taking too long, we need to reset the interface
		if(!ui16gUartTimeout && ui16ParserState != INIT){
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <main+0x59c>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f47f ad96 	bne.w	80005f4 <main+0xb4>
 8000ac8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f43f ad92 	beq.w	80005f4 <main+0xb4>
			ui16ParserState = CLEANUP;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		ui8TempRxByteCount = dGetQueueSize(stcQueueRx);
 8000ad4:	e58e      	b.n	80005f4 <main+0xb4>
 8000ad6:	bf00      	nop
 8000ad8:	200004ac 	.word	0x200004ac
 8000adc:	20000084 	.word	0x20000084

08000ae0 <max>:
#error Unsupported LOCK_VERSION (add it...)

#endif


static int max(int a, int b) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
    if (a > b) { return a; }
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	dd01      	ble.n	8000af6 <max+0x16>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	e000      	b.n	8000af8 <max+0x18>
    return b;
 8000af6:	683b      	ldr	r3, [r7, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <getAlphanumeric>:
*/


#pragma mark - Mode testing and conversion

static int8_t getAlphanumeric(char c) {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]

    if (c >= '0' && c <= '9') { return (c - '0'); }
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b2f      	cmp	r3, #47	; 0x2f
 8000b12:	d907      	bls.n	8000b24 <getAlphanumeric+0x20>
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b39      	cmp	r3, #57	; 0x39
 8000b18:	d804      	bhi.n	8000b24 <getAlphanumeric+0x20>
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	3b30      	subs	r3, #48	; 0x30
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	e05b      	b.n	8000bdc <getAlphanumeric+0xd8>
    if (c >= 'A' && c <= 'Z') { return (c - 'A' + 10); }
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b40      	cmp	r3, #64	; 0x40
 8000b28:	d907      	bls.n	8000b3a <getAlphanumeric+0x36>
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b5a      	cmp	r3, #90	; 0x5a
 8000b2e:	d804      	bhi.n	8000b3a <getAlphanumeric+0x36>
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	3b37      	subs	r3, #55	; 0x37
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	e050      	b.n	8000bdc <getAlphanumeric+0xd8>

    switch (c) {
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	3b20      	subs	r3, #32
 8000b3e:	2b1a      	cmp	r3, #26
 8000b40:	d84a      	bhi.n	8000bd8 <getAlphanumeric+0xd4>
 8000b42:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <getAlphanumeric+0x44>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000bb5 	.word	0x08000bb5
 8000b4c:	08000bd9 	.word	0x08000bd9
 8000b50:	08000bd9 	.word	0x08000bd9
 8000b54:	08000bd9 	.word	0x08000bd9
 8000b58:	08000bb9 	.word	0x08000bb9
 8000b5c:	08000bbd 	.word	0x08000bbd
 8000b60:	08000bd9 	.word	0x08000bd9
 8000b64:	08000bd9 	.word	0x08000bd9
 8000b68:	08000bd9 	.word	0x08000bd9
 8000b6c:	08000bd9 	.word	0x08000bd9
 8000b70:	08000bc1 	.word	0x08000bc1
 8000b74:	08000bc5 	.word	0x08000bc5
 8000b78:	08000bd9 	.word	0x08000bd9
 8000b7c:	08000bc9 	.word	0x08000bc9
 8000b80:	08000bcd 	.word	0x08000bcd
 8000b84:	08000bd1 	.word	0x08000bd1
 8000b88:	08000bd9 	.word	0x08000bd9
 8000b8c:	08000bd9 	.word	0x08000bd9
 8000b90:	08000bd9 	.word	0x08000bd9
 8000b94:	08000bd9 	.word	0x08000bd9
 8000b98:	08000bd9 	.word	0x08000bd9
 8000b9c:	08000bd9 	.word	0x08000bd9
 8000ba0:	08000bd9 	.word	0x08000bd9
 8000ba4:	08000bd9 	.word	0x08000bd9
 8000ba8:	08000bd9 	.word	0x08000bd9
 8000bac:	08000bd9 	.word	0x08000bd9
 8000bb0:	08000bd5 	.word	0x08000bd5
        case ' ': return 36;
 8000bb4:	2324      	movs	r3, #36	; 0x24
 8000bb6:	e011      	b.n	8000bdc <getAlphanumeric+0xd8>
        case '$': return 37;
 8000bb8:	2325      	movs	r3, #37	; 0x25
 8000bba:	e00f      	b.n	8000bdc <getAlphanumeric+0xd8>
        case '%': return 38;
 8000bbc:	2326      	movs	r3, #38	; 0x26
 8000bbe:	e00d      	b.n	8000bdc <getAlphanumeric+0xd8>
        case '*': return 39;
 8000bc0:	2327      	movs	r3, #39	; 0x27
 8000bc2:	e00b      	b.n	8000bdc <getAlphanumeric+0xd8>
        case '+': return 40;
 8000bc4:	2328      	movs	r3, #40	; 0x28
 8000bc6:	e009      	b.n	8000bdc <getAlphanumeric+0xd8>
        case '-': return 41;
 8000bc8:	2329      	movs	r3, #41	; 0x29
 8000bca:	e007      	b.n	8000bdc <getAlphanumeric+0xd8>
        case '.': return 42;
 8000bcc:	232a      	movs	r3, #42	; 0x2a
 8000bce:	e005      	b.n	8000bdc <getAlphanumeric+0xd8>
        case '/': return 43;
 8000bd0:	232b      	movs	r3, #43	; 0x2b
 8000bd2:	e003      	b.n	8000bdc <getAlphanumeric+0xd8>
        case ':': return 44;
 8000bd4:	232c      	movs	r3, #44	; 0x2c
 8000bd6:	e001      	b.n	8000bdc <getAlphanumeric+0xd8>
    }

    return -1;
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <isAlphanumeric>:

static bool isAlphanumeric(const char *text, uint16_t length) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]
    while (length != 0) {
 8000bf4:	e00f      	b.n	8000c16 <isAlphanumeric+0x2e>
        if (getAlphanumeric(text[--length]) == -1) { return false; }
 8000bf6:	887b      	ldrh	r3, [r7, #2]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	807b      	strh	r3, [r7, #2]
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff7d 	bl	8000b04 <getAlphanumeric>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c10:	d101      	bne.n	8000c16 <isAlphanumeric+0x2e>
 8000c12:	2300      	movs	r3, #0
 8000c14:	e003      	b.n	8000c1e <isAlphanumeric+0x36>
    while (length != 0) {
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1ec      	bne.n	8000bf6 <isAlphanumeric+0xe>
    }
    return true;
 8000c1c:	2301      	movs	r3, #1
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <isNumeric>:


static bool isNumeric(const char *text, uint16_t length) {
 8000c26:	b480      	push	{r7}
 8000c28:	b085      	sub	sp, #20
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	807b      	strh	r3, [r7, #2]
    while (length != 0) {
 8000c32:	e00f      	b.n	8000c54 <isNumeric+0x2e>
        char c = text[--length];
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	807b      	strh	r3, [r7, #2]
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	73fb      	strb	r3, [r7, #15]
        if (c < '0' || c > '9') { return false; }
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b2f      	cmp	r3, #47	; 0x2f
 8000c48:	d902      	bls.n	8000c50 <isNumeric+0x2a>
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b39      	cmp	r3, #57	; 0x39
 8000c4e:	d901      	bls.n	8000c54 <isNumeric+0x2e>
 8000c50:	2300      	movs	r3, #0
 8000c52:	e003      	b.n	8000c5c <isNumeric+0x36>
    while (length != 0) {
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1ec      	bne.n	8000c34 <isNumeric+0xe>
    }
    return true;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <getModeBits>:
// We store the following tightly packed (less 8) in modeInfo
//               <=9  <=26  <= 40
// NUMERIC      ( 10,   12,    14);
// ALPHANUMERIC (  9,   11,    13);
// BYTE         (  8,   16,    16);
static char getModeBits(uint8_t version, uint8_t mode) {
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71bb      	strb	r3, [r7, #6]
    // Note: We use 15 instead of 16; since 15 doesn't exist and we cannot store 16 (8 + 8) in 3 bits
    // hex(int("".join(reversed([('00' + bin(x - 8)[2:])[-3:] for x in [10, 9, 8, 12, 11, 15, 14, 13, 15]])), 2))
    unsigned int modeInfo = 0x7bbb80a;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <getModeBits+0x60>)
 8000c7a:	60fb      	str	r3, [r7, #12]

#if LOCK_VERSION == 0 || LOCK_VERSION > 9
    if (version > 9) { modeInfo >>= 9; }
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	d902      	bls.n	8000c88 <getModeBits+0x20>
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	0a5b      	lsrs	r3, r3, #9
 8000c86:	60fb      	str	r3, [r7, #12]
#endif

#if LOCK_VERSION == 0 || LOCK_VERSION > 26
    if (version > 26) { modeInfo >>= 9; }
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b1a      	cmp	r3, #26
 8000c8c:	d902      	bls.n	8000c94 <getModeBits+0x2c>
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	0a5b      	lsrs	r3, r3, #9
 8000c92:	60fb      	str	r3, [r7, #12]
#endif

    char result = 8 + ((modeInfo >> (3 * mode)) & 0x07);
 8000c94:	79ba      	ldrb	r2, [r7, #6]
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	3308      	adds	r3, #8
 8000cac:	72fb      	strb	r3, [r7, #11]
    if (result == 15) { result = 16; }
 8000cae:	7afb      	ldrb	r3, [r7, #11]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d101      	bne.n	8000cb8 <getModeBits+0x50>
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	72fb      	strb	r3, [r7, #11]

    return result;
 8000cb8:	7afb      	ldrb	r3, [r7, #11]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	07bbb80a 	.word	0x07bbb80a

08000ccc <bb_getGridSizeBytes>:
    }
    printf("\n");
}
*/

static uint16_t bb_getGridSizeBytes(uint8_t size) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
    return (((size * size) + 7) / 8);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	79fa      	ldrb	r2, [r7, #7]
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	3307      	adds	r3, #7
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	da00      	bge.n	8000ce6 <bb_getGridSizeBytes+0x1a>
 8000ce4:	3307      	adds	r3, #7
 8000ce6:	10db      	asrs	r3, r3, #3
 8000ce8:	b29b      	uxth	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <bb_getBufferSizeBytes>:

static uint16_t bb_getBufferSizeBytes(uint32_t bits) {
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
    return ((bits + 7) / 8);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3307      	adds	r3, #7
 8000d02:	08db      	lsrs	r3, r3, #3
 8000d04:	b29b      	uxth	r3, r3
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <bb_initBuffer>:

static void bb_initBuffer(BitBucket *bitBuffer, uint8_t *data, int32_t capacityBytes) {
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
    bitBuffer->bitOffsetOrWidth = 0;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
    bitBuffer->capacityBytes = capacityBytes;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	809a      	strh	r2, [r3, #4]
    bitBuffer->data = data;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	609a      	str	r2, [r3, #8]

    memset(data, 0, bitBuffer->capacityBytes);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	889b      	ldrh	r3, [r3, #4]
 8000d36:	461a      	mov	r2, r3
 8000d38:	2100      	movs	r1, #0
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f001 fd0f 	bl	800275e <memset>
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <bb_initGrid>:

static void bb_initGrid(BitBucket *bitGrid, uint8_t *data, uint8_t size) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	4613      	mov	r3, r2
 8000d54:	71fb      	strb	r3, [r7, #7]
    bitGrid->bitOffsetOrWidth = size;
 8000d56:	79fa      	ldrb	r2, [r7, #7]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	601a      	str	r2, [r3, #0]
    bitGrid->capacityBytes = bb_getGridSizeBytes(size);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffb4 	bl	8000ccc <bb_getGridSizeBytes>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	809a      	strh	r2, [r3, #4]
    bitGrid->data = data;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	609a      	str	r2, [r3, #8]

    memset(data, 0, bitGrid->capacityBytes);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	889b      	ldrh	r3, [r3, #4]
 8000d76:	461a      	mov	r2, r3
 8000d78:	2100      	movs	r1, #0
 8000d7a:	68b8      	ldr	r0, [r7, #8]
 8000d7c:	f001 fcef 	bl	800275e <memset>
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <bb_appendBits>:

static void bb_appendBits(BitBucket *bitBuffer, uint32_t val, uint8_t length) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	4613      	mov	r3, r2
 8000d94:	71fb      	strb	r3, [r7, #7]
    uint32_t offset = bitBuffer->bitOffsetOrWidth;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	617b      	str	r3, [r7, #20]
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	74fb      	strb	r3, [r7, #19]
 8000da4:	e024      	b.n	8000df0 <bb_appendBits+0x68>
        bitBuffer->data[offset >> 3] |= ((val >> i) & 1) << (7 - (offset & 7));
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	08db      	lsrs	r3, r3, #3
 8000dae:	4413      	add	r3, r2
 8000db0:	7819      	ldrb	r1, [r3, #0]
 8000db2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbc:	f003 0201 	and.w	r2, r3, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6898      	ldr	r0, [r3, #8]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	4403      	add	r3, r0
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	701a      	strb	r2, [r3, #0]
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
 8000dde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	3b01      	subs	r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	74fb      	strb	r3, [r7, #19]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dad6      	bge.n	8000da6 <bb_appendBits+0x1e>
    }
    bitBuffer->bitOffsetOrWidth = offset;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	601a      	str	r2, [r3, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <bb_setBit>:
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
        bitBuffer->data[offset >> 3] |= ((val >> i) & 1) << (7 - (offset & 7));
    }
}
*/
static void bb_setBit(BitBucket *bitGrid, uint8_t x, uint8_t y, bool on) {
 8000e0a:	b480      	push	{r7}
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	4608      	mov	r0, r1
 8000e14:	4611      	mov	r1, r2
 8000e16:	461a      	mov	r2, r3
 8000e18:	4603      	mov	r3, r0
 8000e1a:	70fb      	strb	r3, [r7, #3]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70bb      	strb	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	707b      	strb	r3, [r7, #1]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8000e24:	78bb      	ldrb	r3, [r7, #2]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	6812      	ldr	r2, [r2, #0]
 8000e2a:	fb02 f203 	mul.w	r2, r2, r3
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	4413      	add	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
    uint8_t mask = 1 << (7 - (offset & 0x07));
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	72fb      	strb	r3, [r7, #11]
    if (on) {
 8000e44:	787b      	ldrb	r3, [r7, #1]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00f      	beq.n	8000e6a <bb_setBit+0x60>
        bitGrid->data[offset >> 3] |= mask;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	4413      	add	r3, r2
 8000e54:	7819      	ldrb	r1, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	08db      	lsrs	r3, r3, #3
 8000e5e:	4413      	add	r3, r2
 8000e60:	7afa      	ldrb	r2, [r7, #11]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	701a      	strb	r2, [r3, #0]
    } else {
        bitGrid->data[offset >> 3] &= ~mask;
    }
}
 8000e68:	e013      	b.n	8000e92 <bb_setBit+0x88>
        bitGrid->data[offset >> 3] &= ~mask;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	08db      	lsrs	r3, r3, #3
 8000e72:	4413      	add	r3, r2
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b25a      	sxtb	r2, r3
 8000e78:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	4013      	ands	r3, r2
 8000e82:	b259      	sxtb	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2ca      	uxtb	r2, r1
 8000e90:	701a      	strb	r2, [r3, #0]
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <bb_invertBit>:

static void bb_invertBit(BitBucket *bitGrid, uint8_t x, uint8_t y, bool invert) {
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4603      	mov	r3, r0
 8000eae:	70fb      	strb	r3, [r7, #3]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70bb      	strb	r3, [r7, #2]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	707b      	strb	r3, [r7, #1]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8000eb8:	78bb      	ldrb	r3, [r7, #2]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	fb02 f203 	mul.w	r2, r2, r3
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
    uint8_t mask = 1 << (7 - (offset & 0x07));
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	72fb      	strb	r3, [r7, #11]
    bool on = ((bitGrid->data[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	08db      	lsrs	r3, r3, #3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	fa42 f303 	asr.w	r3, r2, r3
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	bf14      	ite	ne
 8000efa:	2301      	movne	r3, #1
 8000efc:	2300      	moveq	r3, #0
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	72bb      	strb	r3, [r7, #10]
    if (on ^ invert) {
 8000f02:	7aba      	ldrb	r2, [r7, #10]
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d00f      	beq.n	8000f2a <bb_invertBit+0x8c>
        bitGrid->data[offset >> 3] |= mask;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	08db      	lsrs	r3, r3, #3
 8000f12:	4413      	add	r3, r2
 8000f14:	7819      	ldrb	r1, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	4413      	add	r3, r2
 8000f20:	7afa      	ldrb	r2, [r7, #11]
 8000f22:	430a      	orrs	r2, r1
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
    } else {
        bitGrid->data[offset >> 3] &= ~mask;
    }
}
 8000f28:	e013      	b.n	8000f52 <bb_invertBit+0xb4>
        bitGrid->data[offset >> 3] &= ~mask;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	4413      	add	r3, r2
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b25a      	sxtb	r2, r3
 8000f38:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	4013      	ands	r3, r2
 8000f42:	b259      	sxtb	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b2ca      	uxtb	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <bb_getBit>:

static bool bb_getBit(BitBucket *bitGrid, uint8_t x, uint8_t y) {
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	70bb      	strb	r3, [r7, #2]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8000f6e:	78bb      	ldrb	r3, [r7, #2]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	fb02 f203 	mul.w	r2, r2, r3
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
    return (bitGrid->data[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	08db      	lsrs	r3, r3, #3
 8000f86:	4413      	add	r3, r2
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	fa42 f303 	asr.w	r3, r2, r3
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <applyMask>:

// XORs the data modules in this QR Code with the given mask pattern. Due to XOR's mathematical
// properties, calling applyMask(m) twice with the same value is equivalent to no change at all.
// This means it is possible to apply a mask, undo it, and try another mask. Note that a final
// well-formed QR Code symbol needs exactly one mask applied (not zero, not two, etc.).
static void applyMask(BitBucket *modules, BitBucket *isFunction, uint8_t mask) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	71fb      	strb	r3, [r7, #7]
    uint8_t size = modules->bitOffsetOrWidth;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	753b      	strb	r3, [r7, #20]

    for (uint8_t y = 0; y < size; y++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	75fb      	strb	r3, [r7, #23]
 8000fcc:	e0de      	b.n	800118c <applyMask+0x1d8>
        for (uint8_t x = 0; x < size; x++) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	75bb      	strb	r3, [r7, #22]
 8000fd2:	e0d3      	b.n	800117c <applyMask+0x1c8>
            if (bb_getBit(isFunction, x, y)) { continue; }
 8000fd4:	7dfa      	ldrb	r2, [r7, #23]
 8000fd6:	7dbb      	ldrb	r3, [r7, #22]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	68b8      	ldr	r0, [r7, #8]
 8000fdc:	f7ff ffbf 	bl	8000f5e <bb_getBit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f040 80c6 	bne.w	8001174 <applyMask+0x1c0>

            bool invert = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	757b      	strb	r3, [r7, #21]
            switch (mask) {
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b07      	cmp	r3, #7
 8000ff0:	f200 80b9 	bhi.w	8001166 <applyMask+0x1b2>
 8000ff4:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <applyMask+0x48>)
 8000ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffa:	bf00      	nop
 8000ffc:	0800101d 	.word	0x0800101d
 8001000:	08001037 	.word	0x08001037
 8001004:	0800104d 	.word	0x0800104d
 8001008:	0800106f 	.word	0x0800106f
 800100c:	08001095 	.word	0x08001095
 8001010:	080010bd 	.word	0x080010bd
 8001014:	080010f3 	.word	0x080010f3
 8001018:	0800112d 	.word	0x0800112d
                case 0:  invert = (x + y) % 2 == 0;                    break;
 800101c:	7dba      	ldrb	r2, [r7, #22]
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	4413      	add	r3, r2
 8001022:	b2db      	uxtb	r3, r3
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf0c      	ite	eq
 800102c:	2301      	moveq	r3, #1
 800102e:	2300      	movne	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	757b      	strb	r3, [r7, #21]
 8001034:	e097      	b.n	8001166 <applyMask+0x1b2>
                case 1:  invert = y % 2 == 0;                          break;
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bf0c      	ite	eq
 8001042:	2301      	moveq	r3, #1
 8001044:	2300      	movne	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	757b      	strb	r3, [r7, #21]
 800104a:	e08c      	b.n	8001166 <applyMask+0x1b2>
                case 2:  invert = x % 3 == 0;                          break;
 800104c:	7dba      	ldrb	r2, [r7, #22]
 800104e:	4b54      	ldr	r3, [pc, #336]	; (80011a0 <applyMask+0x1ec>)
 8001050:	fba3 1302 	umull	r1, r3, r3, r2
 8001054:	0859      	lsrs	r1, r3, #1
 8001056:	460b      	mov	r3, r1
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	440b      	add	r3, r1
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf0c      	ite	eq
 8001064:	2301      	moveq	r3, #1
 8001066:	2300      	movne	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	757b      	strb	r3, [r7, #21]
 800106c:	e07b      	b.n	8001166 <applyMask+0x1b2>
                case 3:  invert = (x + y) % 3 == 0;                    break;
 800106e:	7dba      	ldrb	r2, [r7, #22]
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	18d1      	adds	r1, r2, r3
 8001074:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <applyMask+0x1f0>)
 8001076:	fb83 3201 	smull	r3, r2, r3, r1
 800107a:	17cb      	asrs	r3, r1, #31
 800107c:	1ad2      	subs	r2, r2, r3
 800107e:	4613      	mov	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4413      	add	r3, r2
 8001084:	1aca      	subs	r2, r1, r3
 8001086:	2a00      	cmp	r2, #0
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
 8001090:	757b      	strb	r3, [r7, #21]
 8001092:	e068      	b.n	8001166 <applyMask+0x1b2>
                case 4:  invert = (x / 3 + y / 2) % 2 == 0;            break;
 8001094:	7dbb      	ldrb	r3, [r7, #22]
 8001096:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <applyMask+0x1ec>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	085b      	lsrs	r3, r3, #1
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	085b      	lsrs	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4413      	add	r3, r2
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	757b      	strb	r3, [r7, #21]
 80010ba:	e054      	b.n	8001166 <applyMask+0x1b2>
                case 5:  invert = x * y % 2 + x * y % 3 == 0;          break;
 80010bc:	7dbb      	ldrb	r3, [r7, #22]
 80010be:	7dfa      	ldrb	r2, [r7, #23]
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	f003 0001 	and.w	r0, r3, #1
 80010c8:	7dbb      	ldrb	r3, [r7, #22]
 80010ca:	7dfa      	ldrb	r2, [r7, #23]
 80010cc:	fb02 f103 	mul.w	r1, r2, r3
 80010d0:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <applyMask+0x1f0>)
 80010d2:	fb83 3201 	smull	r3, r2, r3, r1
 80010d6:	17cb      	asrs	r3, r1, #31
 80010d8:	1ad2      	subs	r2, r2, r3
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	1aca      	subs	r2, r1, r3
 80010e2:	1883      	adds	r3, r0, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	757b      	strb	r3, [r7, #21]
 80010f0:	e039      	b.n	8001166 <applyMask+0x1b2>
                case 6:  invert = (x * y % 2 + x * y % 3) % 2 == 0;    break;
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	7dfa      	ldrb	r2, [r7, #23]
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	7dbb      	ldrb	r3, [r7, #22]
 80010fe:	7dfa      	ldrb	r2, [r7, #23]
 8001100:	fb02 f203 	mul.w	r2, r2, r3
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <applyMask+0x1f0>)
 8001106:	fb83 3102 	smull	r3, r1, r3, r2
 800110a:	17d3      	asrs	r3, r2, #31
 800110c:	1ac9      	subs	r1, r1, r3
 800110e:	460b      	mov	r3, r1
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	440b      	add	r3, r1
 8001114:	1ad1      	subs	r1, r2, r3
 8001116:	460b      	mov	r3, r1
 8001118:	4403      	add	r3, r0
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf0c      	ite	eq
 8001122:	2301      	moveq	r3, #1
 8001124:	2300      	movne	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	757b      	strb	r3, [r7, #21]
 800112a:	e01c      	b.n	8001166 <applyMask+0x1b2>
                case 7:  invert = ((x + y) % 2 + x * y % 3) % 2 == 0;  break;
 800112c:	7dba      	ldrb	r2, [r7, #22]
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	4413      	add	r3, r2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	7dfa      	ldrb	r2, [r7, #23]
 800113a:	fb02 f203 	mul.w	r2, r2, r3
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <applyMask+0x1f0>)
 8001140:	fb83 3102 	smull	r3, r1, r3, r2
 8001144:	17d3      	asrs	r3, r2, #31
 8001146:	1ac9      	subs	r1, r1, r3
 8001148:	460b      	mov	r3, r1
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	440b      	add	r3, r1
 800114e:	1ad1      	subs	r1, r2, r3
 8001150:	460b      	mov	r3, r1
 8001152:	4403      	add	r3, r0
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	757b      	strb	r3, [r7, #21]
 8001164:	bf00      	nop
            }
            bb_invertBit(modules, x, y, invert);
 8001166:	7d7b      	ldrb	r3, [r7, #21]
 8001168:	7dfa      	ldrb	r2, [r7, #23]
 800116a:	7db9      	ldrb	r1, [r7, #22]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff fe96 	bl	8000e9e <bb_invertBit>
 8001172:	e000      	b.n	8001176 <applyMask+0x1c2>
            if (bb_getBit(isFunction, x, y)) { continue; }
 8001174:	bf00      	nop
        for (uint8_t x = 0; x < size; x++) {
 8001176:	7dbb      	ldrb	r3, [r7, #22]
 8001178:	3301      	adds	r3, #1
 800117a:	75bb      	strb	r3, [r7, #22]
 800117c:	7dba      	ldrb	r2, [r7, #22]
 800117e:	7d3b      	ldrb	r3, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	f4ff af27 	bcc.w	8000fd4 <applyMask+0x20>
    for (uint8_t y = 0; y < size; y++) {
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	3301      	adds	r3, #1
 800118a:	75fb      	strb	r3, [r7, #23]
 800118c:	7dfa      	ldrb	r2, [r7, #23]
 800118e:	7d3b      	ldrb	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	f4ff af1c 	bcc.w	8000fce <applyMask+0x1a>
        }
    }
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	aaaaaaab 	.word	0xaaaaaaab
 80011a4:	55555556 	.word	0x55555556

080011a8 <setFunctionModule>:

static void setFunctionModule(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y, bool on) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4611      	mov	r1, r2
 80011b4:	461a      	mov	r2, r3
 80011b6:	460b      	mov	r3, r1
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	4613      	mov	r3, r2
 80011bc:	71bb      	strb	r3, [r7, #6]
    bb_setBit(modules, x, y, on);
 80011be:	7e3b      	ldrb	r3, [r7, #24]
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	79f9      	ldrb	r1, [r7, #7]
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff fe20 	bl	8000e0a <bb_setBit>
    bb_setBit(isFunction, x, y, true);
 80011ca:	2301      	movs	r3, #1
 80011cc:	79ba      	ldrb	r2, [r7, #6]
 80011ce:	79f9      	ldrb	r1, [r7, #7]
 80011d0:	68b8      	ldr	r0, [r7, #8]
 80011d2:	f7ff fe1a 	bl	8000e0a <bb_setBit>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <drawFinderPattern>:

// Draws a 9*9 finder pattern including the border separator, with the center module at (x, y).
static void drawFinderPattern(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	b088      	sub	sp, #32
 80011e2:	af02      	add	r7, sp, #8
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	4611      	mov	r1, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	460b      	mov	r3, r1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	71bb      	strb	r3, [r7, #6]
    uint8_t size = modules->bitOffsetOrWidth;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	757b      	strb	r3, [r7, #21]

    for (int8_t i = -4; i <= 4; i++) {
 80011fa:	23fc      	movs	r3, #252	; 0xfc
 80011fc:	75fb      	strb	r3, [r7, #23]
 80011fe:	e057      	b.n	80012b0 <drawFinderPattern+0xd2>
        for (int8_t j = -4; j <= 4; j++) {
 8001200:	23fc      	movs	r3, #252	; 0xfc
 8001202:	75bb      	strb	r3, [r7, #22]
 8001204:	e04a      	b.n	800129c <drawFinderPattern+0xbe>
            uint8_t dist = max(abs(i), abs(j));  // Chebyshev/infinity norm
 8001206:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800120a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800120e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001212:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001216:	2b00      	cmp	r3, #0
 8001218:	bfb8      	it	lt
 800121a:	425b      	neglt	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	4610      	mov	r0, r2
 8001220:	f7ff fc5e 	bl	8000ae0 <max>
 8001224:	4603      	mov	r3, r0
 8001226:	753b      	strb	r3, [r7, #20]
            int16_t xx = x + j, yy = y + i;
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	b21a      	sxth	r2, r3
 800122c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001230:	b21b      	sxth	r3, r3
 8001232:	4413      	add	r3, r2
 8001234:	827b      	strh	r3, [r7, #18]
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	b21a      	sxth	r2, r3
 800123a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4413      	add	r3, r2
 8001242:	823b      	strh	r3, [r7, #16]
            if (0 <= xx && xx < size && 0 <= yy && yy < size) {
 8001244:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db21      	blt.n	8001290 <drawFinderPattern+0xb2>
 800124c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001250:	7d7b      	ldrb	r3, [r7, #21]
 8001252:	429a      	cmp	r2, r3
 8001254:	da1c      	bge.n	8001290 <drawFinderPattern+0xb2>
 8001256:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db18      	blt.n	8001290 <drawFinderPattern+0xb2>
 800125e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001262:	7d7b      	ldrb	r3, [r7, #21]
 8001264:	429a      	cmp	r2, r3
 8001266:	da13      	bge.n	8001290 <drawFinderPattern+0xb2>
                setFunctionModule(modules, isFunction, xx, yy, dist != 2 && dist != 4);
 8001268:	8a7b      	ldrh	r3, [r7, #18]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	8a3b      	ldrh	r3, [r7, #16]
 800126e:	b2d9      	uxtb	r1, r3
 8001270:	7d3b      	ldrb	r3, [r7, #20]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d004      	beq.n	8001280 <drawFinderPattern+0xa2>
 8001276:	7d3b      	ldrb	r3, [r7, #20]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d001      	beq.n	8001280 <drawFinderPattern+0xa2>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <drawFinderPattern+0xa4>
 8001280:	2300      	movs	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	460b      	mov	r3, r1
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff ff8c 	bl	80011a8 <setFunctionModule>
        for (int8_t j = -4; j <= 4; j++) {
 8001290:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	3301      	adds	r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	75bb      	strb	r3, [r7, #22]
 800129c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	ddb0      	ble.n	8001206 <drawFinderPattern+0x28>
    for (int8_t i = -4; i <= 4; i++) {
 80012a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	75fb      	strb	r3, [r7, #23]
 80012b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	dda3      	ble.n	8001200 <drawFinderPattern+0x22>
            }
        }
    }
}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <drawAlignmentPattern>:

// Draws a 5*5 alignment pattern, with the center module at (x, y).
static void drawAlignmentPattern(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y) {
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	4611      	mov	r1, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	460b      	mov	r3, r1
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	4613      	mov	r3, r2
 80012d4:	71bb      	strb	r3, [r7, #6]
    for (int8_t i = -2; i <= 2; i++) {
 80012d6:	23fe      	movs	r3, #254	; 0xfe
 80012d8:	75fb      	strb	r3, [r7, #23]
 80012da:	e036      	b.n	800134a <drawAlignmentPattern+0x8a>
        for (int8_t j = -2; j <= 2; j++) {
 80012dc:	23fe      	movs	r3, #254	; 0xfe
 80012de:	75bb      	strb	r3, [r7, #22]
 80012e0:	e029      	b.n	8001336 <drawAlignmentPattern+0x76>
            setFunctionModule(modules, isFunction, x + j, y + i, max(abs(i), abs(j)) != 1);
 80012e2:	7dba      	ldrb	r2, [r7, #22]
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4413      	add	r3, r2
 80012e8:	b2dc      	uxtb	r4, r3
 80012ea:	7dfa      	ldrb	r2, [r7, #23]
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	4413      	add	r3, r2
 80012f0:	b2dd      	uxtb	r5, r3
 80012f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012f6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012fa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012fe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001302:	2b00      	cmp	r3, #0
 8001304:	bfb8      	it	lt
 8001306:	425b      	neglt	r3, r3
 8001308:	4619      	mov	r1, r3
 800130a:	4610      	mov	r0, r2
 800130c:	f7ff fbe8 	bl	8000ae0 <max>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	462b      	mov	r3, r5
 8001320:	4622      	mov	r2, r4
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff ff3f 	bl	80011a8 <setFunctionModule>
        for (int8_t j = -2; j <= 2; j++) {
 800132a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3301      	adds	r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	75bb      	strb	r3, [r7, #22]
 8001336:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800133a:	2b02      	cmp	r3, #2
 800133c:	ddd1      	ble.n	80012e2 <drawAlignmentPattern+0x22>
    for (int8_t i = -2; i <= 2; i++) {
 800133e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	3301      	adds	r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	75fb      	strb	r3, [r7, #23]
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800134e:	2b02      	cmp	r3, #2
 8001350:	ddc4      	ble.n	80012dc <drawAlignmentPattern+0x1c>
        }
    }
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bdb0      	pop	{r4, r5, r7, pc}

0800135a <drawFormatBits>:

// Draws two copies of the format bits (with its own error correction code)
// based on the given mask and this object's error correction level field.
static void drawFormatBits(BitBucket *modules, BitBucket *isFunction, uint8_t ecc, uint8_t mask) {
 800135a:	b580      	push	{r7, lr}
 800135c:	b08c      	sub	sp, #48	; 0x30
 800135e:	af02      	add	r7, sp, #8
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	4611      	mov	r1, r2
 8001366:	461a      	mov	r2, r3
 8001368:	460b      	mov	r3, r1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	4613      	mov	r3, r2
 800136e:	71bb      	strb	r3, [r7, #6]

    uint8_t size = modules->bitOffsetOrWidth;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	76fb      	strb	r3, [r7, #27]

    // Calculate error correction code and pack bits
    uint32_t data = ecc << 3 | mask;  // errCorrLvl is uint2, mask is uint3
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	00da      	lsls	r2, r3, #3
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	4313      	orrs	r3, r2
 800137e:	617b      	str	r3, [r7, #20]
    uint32_t rem = data;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < 10; i++) {
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
 8001388:	e00c      	b.n	80013a4 <drawFormatBits+0x4a>
        rem = (rem << 1) ^ ((rem >> 9) * 0x537);
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	005a      	lsls	r2, r3, #1
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	0a5b      	lsrs	r3, r3, #9
 8001392:	f240 5137 	movw	r1, #1335	; 0x537
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4053      	eors	r3, r2
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < 10; i++) {
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	3301      	adds	r3, #1
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b09      	cmp	r3, #9
 80013a8:	ddef      	ble.n	800138a <drawFormatBits+0x30>
    }

    data = data << 10 | rem;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	029b      	lsls	r3, r3, #10
 80013ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b0:	4313      	orrs	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
    data ^= 0x5412;  // uint15
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f483 43a8 	eor.w	r3, r3, #21504	; 0x5400
 80013ba:	f083 0312 	eor.w	r3, r3, #18
 80013be:	617b      	str	r3, [r7, #20]

    // Draw first copy
    for (uint8_t i = 0; i <= 5; i++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	77fb      	strb	r3, [r7, #31]
 80013c4:	e015      	b.n	80013f2 <drawFormatBits+0x98>
        setFunctionModule(modules, isFunction, 8, i, ((data >> i) & 1) != 0);
 80013c6:	7ffb      	ldrb	r3, [r7, #31]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	bf14      	ite	ne
 80013d6:	2301      	movne	r3, #1
 80013d8:	2300      	moveq	r3, #0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	9200      	str	r2, [sp, #0]
 80013e2:	2208      	movs	r2, #8
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f7ff fede 	bl	80011a8 <setFunctionModule>
    for (uint8_t i = 0; i <= 5; i++) {
 80013ec:	7ffb      	ldrb	r3, [r7, #31]
 80013ee:	3301      	adds	r3, #1
 80013f0:	77fb      	strb	r3, [r7, #31]
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d9e6      	bls.n	80013c6 <drawFormatBits+0x6c>
    }

    setFunctionModule(modules, isFunction, 8, 7, ((data >> 6) & 1) != 0);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	099b      	lsrs	r3, r3, #6
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf14      	ite	ne
 8001404:	2301      	movne	r3, #1
 8001406:	2300      	moveq	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2307      	movs	r3, #7
 800140e:	2208      	movs	r2, #8
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f7ff fec8 	bl	80011a8 <setFunctionModule>
    setFunctionModule(modules, isFunction, 8, 8, ((data >> 7) & 1) != 0);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	09db      	lsrs	r3, r3, #7
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf14      	ite	ne
 8001424:	2301      	movne	r3, #1
 8001426:	2300      	moveq	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2308      	movs	r3, #8
 800142e:	2208      	movs	r2, #8
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f7ff feb8 	bl	80011a8 <setFunctionModule>
    setFunctionModule(modules, isFunction, 7, 8, ((data >> 8) & 1) != 0);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf14      	ite	ne
 8001444:	2301      	movne	r3, #1
 8001446:	2300      	moveq	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2308      	movs	r3, #8
 800144e:	2207      	movs	r2, #7
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff fea8 	bl	80011a8 <setFunctionModule>

    for (int8_t i = 9; i < 15; i++) {
 8001458:	2309      	movs	r3, #9
 800145a:	77bb      	strb	r3, [r7, #30]
 800145c:	e01c      	b.n	8001498 <drawFormatBits+0x13e>
        setFunctionModule(modules, isFunction, 14 - i, 8, ((data >> i) & 1) != 0);
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	f1c3 030e 	rsb	r3, r3, #14
 8001464:	b2d9      	uxtb	r1, r3
 8001466:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf14      	ite	ne
 8001478:	2301      	movne	r3, #1
 800147a:	2300      	moveq	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2308      	movs	r3, #8
 8001482:	460a      	mov	r2, r1
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff fe8e 	bl	80011a8 <setFunctionModule>
    for (int8_t i = 9; i < 15; i++) {
 800148c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	3301      	adds	r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	77bb      	strb	r3, [r7, #30]
 8001498:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800149c:	2b0e      	cmp	r3, #14
 800149e:	ddde      	ble.n	800145e <drawFormatBits+0x104>
    }

    // Draw second copy
    for (int8_t i = 0; i <= 7; i++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	777b      	strb	r3, [r7, #29]
 80014a4:	e01e      	b.n	80014e4 <drawFormatBits+0x18a>
        setFunctionModule(modules, isFunction, size - 1 - i, 8, ((data >> i) & 1) != 0);
 80014a6:	7f7b      	ldrb	r3, [r7, #29]
 80014a8:	7efa      	ldrb	r2, [r7, #27]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b2d9      	uxtb	r1, r3
 80014b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2308      	movs	r3, #8
 80014ce:	460a      	mov	r2, r1
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff fe68 	bl	80011a8 <setFunctionModule>
    for (int8_t i = 0; i <= 7; i++) {
 80014d8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	777b      	strb	r3, [r7, #29]
 80014e4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	dddc      	ble.n	80014a6 <drawFormatBits+0x14c>
    }

    for (int8_t i = 8; i < 15; i++) {
 80014ec:	2308      	movs	r3, #8
 80014ee:	773b      	strb	r3, [r7, #28]
 80014f0:	e01e      	b.n	8001530 <drawFormatBits+0x1d6>
        setFunctionModule(modules, isFunction, 8, size - 15 + i, ((data >> i) & 1) != 0);
 80014f2:	7f3a      	ldrb	r2, [r7, #28]
 80014f4:	7efb      	ldrb	r3, [r7, #27]
 80014f6:	4413      	add	r3, r2
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	3b0f      	subs	r3, #15
 80014fc:	b2d9      	uxtb	r1, r3
 80014fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	fa22 f303 	lsr.w	r3, r2, r3
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf14      	ite	ne
 8001510:	2301      	movne	r3, #1
 8001512:	2300      	moveq	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	460b      	mov	r3, r1
 800151a:	2208      	movs	r2, #8
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff fe42 	bl	80011a8 <setFunctionModule>
    for (int8_t i = 8; i < 15; i++) {
 8001524:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	3301      	adds	r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	773b      	strb	r3, [r7, #28]
 8001530:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8001534:	2b0e      	cmp	r3, #14
 8001536:	dddc      	ble.n	80014f2 <drawFormatBits+0x198>
    }

    setFunctionModule(modules, isFunction, 8, size - 8, true);
 8001538:	7efb      	ldrb	r3, [r7, #27]
 800153a:	3b08      	subs	r3, #8
 800153c:	b2da      	uxtb	r2, r3
 800153e:	2301      	movs	r3, #1
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	4613      	mov	r3, r2
 8001544:	2208      	movs	r2, #8
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff fe2d 	bl	80011a8 <setFunctionModule>
}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <drawVersion>:


// Draws two copies of the version bits (with its own error correction code),
// based on this object's version field (which only has an effect for 7 <= version <= 40).
static void drawVersion(BitBucket *modules, BitBucket *isFunction, uint8_t version) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af02      	add	r7, sp, #8
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	4613      	mov	r3, r2
 8001564:	71fb      	strb	r3, [r7, #7]

    int8_t size = modules->bitOffsetOrWidth;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	767b      	strb	r3, [r7, #25]

#if LOCK_VERSION != 0 && LOCK_VERSION < 7
    return;

#else
    if (version < 7) { return; }
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b06      	cmp	r3, #6
 8001570:	d957      	bls.n	8001622 <drawVersion+0xca>

    // Calculate error correction code and pack bits
    uint32_t rem = version;  // version is uint6, in the range [7, 40]
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < 12; i++) {
 8001576:	2300      	movs	r3, #0
 8001578:	76fb      	strb	r3, [r7, #27]
 800157a:	e00c      	b.n	8001596 <drawVersion+0x3e>
        rem = (rem << 1) ^ ((rem >> 11) * 0x1F25);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005a      	lsls	r2, r3, #1
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	0adb      	lsrs	r3, r3, #11
 8001584:	f641 7125 	movw	r1, #7973	; 0x1f25
 8001588:	fb01 f303 	mul.w	r3, r1, r3
 800158c:	4053      	eors	r3, r2
 800158e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < 12; i++) {
 8001590:	7efb      	ldrb	r3, [r7, #27]
 8001592:	3301      	adds	r3, #1
 8001594:	76fb      	strb	r3, [r7, #27]
 8001596:	7efb      	ldrb	r3, [r7, #27]
 8001598:	2b0b      	cmp	r3, #11
 800159a:	d9ef      	bls.n	800157c <drawVersion+0x24>
    }

    uint32_t data = version << 12 | rem;  // uint18
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	031b      	lsls	r3, r3, #12
 80015a0:	461a      	mov	r2, r3
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]

    // Draw two copies
    for (uint8_t i = 0; i < 18; i++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	76bb      	strb	r3, [r7, #26]
 80015ac:	e035      	b.n	800161a <drawVersion+0xc2>
        bool bit = ((data >> i) & 1) != 0;
 80015ae:	7ebb      	ldrb	r3, [r7, #26]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	fa22 f303 	lsr.w	r3, r2, r3
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2301      	movne	r3, #1
 80015c0:	2300      	moveq	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	74fb      	strb	r3, [r7, #19]
        uint8_t a = size - 11 + i % 3, b = i / 3;
 80015c6:	7eba      	ldrb	r2, [r7, #26]
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <drawVersion+0xd4>)
 80015ca:	fba3 1302 	umull	r1, r3, r3, r2
 80015ce:	0859      	lsrs	r1, r3, #1
 80015d0:	460b      	mov	r3, r1
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	440b      	add	r3, r1
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	7e7b      	ldrb	r3, [r7, #25]
 80015dc:	4413      	add	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3b0b      	subs	r3, #11
 80015e2:	74bb      	strb	r3, [r7, #18]
 80015e4:	7ebb      	ldrb	r3, [r7, #26]
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <drawVersion+0xd4>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	747b      	strb	r3, [r7, #17]
        setFunctionModule(modules, isFunction, a, b, bit);
 80015f0:	7c79      	ldrb	r1, [r7, #17]
 80015f2:	7cba      	ldrb	r2, [r7, #18]
 80015f4:	7cfb      	ldrb	r3, [r7, #19]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	460b      	mov	r3, r1
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f7ff fdd3 	bl	80011a8 <setFunctionModule>
        setFunctionModule(modules, isFunction, b, a, bit);
 8001602:	7cb9      	ldrb	r1, [r7, #18]
 8001604:	7c7a      	ldrb	r2, [r7, #17]
 8001606:	7cfb      	ldrb	r3, [r7, #19]
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	460b      	mov	r3, r1
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f7ff fdca 	bl	80011a8 <setFunctionModule>
    for (uint8_t i = 0; i < 18; i++) {
 8001614:	7ebb      	ldrb	r3, [r7, #26]
 8001616:	3301      	adds	r3, #1
 8001618:	76bb      	strb	r3, [r7, #26]
 800161a:	7ebb      	ldrb	r3, [r7, #26]
 800161c:	2b11      	cmp	r3, #17
 800161e:	d9c6      	bls.n	80015ae <drawVersion+0x56>
 8001620:	e000      	b.n	8001624 <drawVersion+0xcc>
    if (version < 7) { return; }
 8001622:	bf00      	nop
    }

#endif
}
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	aaaaaaab 	.word	0xaaaaaaab

08001630 <drawFunctionPatterns>:

static void drawFunctionPatterns(BitBucket *modules, BitBucket *isFunction, uint8_t version, uint8_t ecc) {
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af02      	add	r7, sp, #8
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	4611      	mov	r1, r2
 800163c:	461a      	mov	r2, r3
 800163e:	460b      	mov	r3, r1
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	4613      	mov	r3, r2
 8001644:	71bb      	strb	r3, [r7, #6]

    uint8_t size = modules->bitOffsetOrWidth;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f887 3020 	strb.w	r3, [r7, #32]

    // Draw the horizontal and vertical timing patterns
    for (uint8_t i = 0; i < size; i++) {
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001654:	e029      	b.n	80016aa <drawFunctionPatterns+0x7a>
        setFunctionModule(modules, isFunction, 6, i, i % 2 == 0);
 8001656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001670:	9200      	str	r2, [sp, #0]
 8001672:	2206      	movs	r2, #6
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff fd96 	bl	80011a8 <setFunctionModule>
        setFunctionModule(modules, isFunction, i, 6, i % 2 == 0);
 800167c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf0c      	ite	eq
 800168a:	2301      	moveq	r3, #1
 800168c:	2300      	movne	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2306      	movs	r3, #6
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f7ff fd84 	bl	80011a8 <setFunctionModule>
    for (uint8_t i = 0; i < size; i++) {
 80016a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016a4:	3301      	adds	r3, #1
 80016a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80016aa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d3cf      	bcc.n	8001656 <drawFunctionPatterns+0x26>
    }

    // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)
    drawFinderPattern(modules, isFunction, 3, 3);
 80016b6:	2303      	movs	r3, #3
 80016b8:	2203      	movs	r2, #3
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fd8e 	bl	80011de <drawFinderPattern>
    drawFinderPattern(modules, isFunction, size - 4, 3);
 80016c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c6:	3b04      	subs	r3, #4
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	2303      	movs	r3, #3
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff fd85 	bl	80011de <drawFinderPattern>
    drawFinderPattern(modules, isFunction, 3, size - 4);
 80016d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016d8:	3b04      	subs	r3, #4
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2203      	movs	r2, #3
 80016de:	68b9      	ldr	r1, [r7, #8]
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f7ff fd7c 	bl	80011de <drawFinderPattern>

#if LOCK_VERSION == 0 || LOCK_VERSION > 1

    if (version > 1) {
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	f240 80be 	bls.w	800186a <drawFunctionPatterns+0x23a>
 80016ee:	466b      	mov	r3, sp
 80016f0:	461d      	mov	r5, r3

        // Draw the numerous alignment patterns

        uint8_t alignCount = version / 7 + 2;
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	4b65      	ldr	r3, [pc, #404]	; (800188c <drawFunctionPatterns+0x25c>)
 80016f6:	fba3 1302 	umull	r1, r3, r3, r2
 80016fa:	1ad2      	subs	r2, r2, r3
 80016fc:	0852      	lsrs	r2, r2, #1
 80016fe:	4413      	add	r3, r2
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3302      	adds	r3, #2
 8001706:	77fb      	strb	r3, [r7, #31]
        uint8_t step;
        if (version != 32) {
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	2b20      	cmp	r3, #32
 800170c:	d00f      	beq.n	800172e <drawFunctionPatterns+0xfe>
            step = (version * 4 + alignCount * 2 + 1) / (2 * alignCount - 2) * 2;  // ceil((size - 13) / (2*numAlign - 2)) * 2
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	005a      	lsls	r2, r3, #1
 8001712:	7ffb      	ldrb	r3, [r7, #31]
 8001714:	4413      	add	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	7ffb      	ldrb	r3, [r7, #31]
 800171c:	3b01      	subs	r3, #1
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fb92 f3f3 	sdiv	r3, r2, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800172c:	e002      	b.n	8001734 <drawFunctionPatterns+0x104>
        } else { // C-C-C-Combo breaker!
            step = 26;
 800172e:	231a      	movs	r3, #26
 8001730:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        }

        uint8_t alignPositionIndex = alignCount - 1;
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	3b01      	subs	r3, #1
 8001738:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint8_t alignPosition[alignCount];
 800173c:	7ff8      	ldrb	r0, [r7, #31]
 800173e:	4603      	mov	r3, r0
 8001740:	3b01      	subs	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	b2c1      	uxtb	r1, r0
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	f04f 0400 	mov.w	r4, #0
 8001752:	00d4      	lsls	r4, r2, #3
 8001754:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001758:	00cb      	lsls	r3, r1, #3
 800175a:	b2c1      	uxtb	r1, r0
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	f04f 0400 	mov.w	r4, #0
 8001768:	00d4      	lsls	r4, r2, #3
 800176a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800176e:	00cb      	lsls	r3, r1, #3
 8001770:	4603      	mov	r3, r0
 8001772:	3307      	adds	r3, #7
 8001774:	08db      	lsrs	r3, r3, #3
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	ebad 0d03 	sub.w	sp, sp, r3
 800177c:	ab02      	add	r3, sp, #8
 800177e:	3300      	adds	r3, #0
 8001780:	617b      	str	r3, [r7, #20]

        alignPosition[0] = 6;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2206      	movs	r2, #6
 8001786:	701a      	strb	r2, [r3, #0]

        uint8_t size = version * 4 + 17;
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3311      	adds	r3, #17
 8001790:	74fb      	strb	r3, [r7, #19]
        for (uint8_t i = 0, pos = size - 7; i < alignCount - 1; i++, pos -= step) {
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001798:	7cfb      	ldrb	r3, [r7, #19]
 800179a:	3b07      	subs	r3, #7
 800179c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017a0:	e015      	b.n	80017ce <drawFunctionPatterns+0x19e>
            alignPosition[alignPositionIndex--] = pos;
 80017a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80017a6:	1e5a      	subs	r2, r3, #1
 80017a8:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 80017ac:	4619      	mov	r1, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80017b4:	545a      	strb	r2, [r3, r1]
        for (uint8_t i = 0, pos = size - 7; i < alignCount - 1; i++, pos -= step) {
 80017b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017ba:	3301      	adds	r3, #1
 80017bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80017c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80017d2:	7ffb      	ldrb	r3, [r7, #31]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	429a      	cmp	r2, r3
 80017d8:	dbe3      	blt.n	80017a2 <drawFunctionPatterns+0x172>
        }

        for (uint8_t i = 0; i < alignCount; i++) {
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017e0:	e03d      	b.n	800185e <drawFunctionPatterns+0x22e>
            for (uint8_t j = 0; j < alignCount; j++) {
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80017e8:	e02f      	b.n	800184a <drawFunctionPatterns+0x21a>
                if ((i == 0 && j == 0) || (i == 0 && j == alignCount - 1) || (i == alignCount - 1 && j == 0)) {
 80017ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d103      	bne.n	80017fa <drawFunctionPatterns+0x1ca>
 80017f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d021      	beq.n	800183e <drawFunctionPatterns+0x20e>
 80017fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <drawFunctionPatterns+0x1de>
 8001802:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001806:	7ffb      	ldrb	r3, [r7, #31]
 8001808:	3b01      	subs	r3, #1
 800180a:	429a      	cmp	r2, r3
 800180c:	d017      	beq.n	800183e <drawFunctionPatterns+0x20e>
 800180e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001812:	7ffb      	ldrb	r3, [r7, #31]
 8001814:	3b01      	subs	r3, #1
 8001816:	429a      	cmp	r2, r3
 8001818:	d103      	bne.n	8001822 <drawFunctionPatterns+0x1f2>
 800181a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00d      	beq.n	800183e <drawFunctionPatterns+0x20e>
                    continue;  // Skip the three finder corners
                } else {
                    drawAlignmentPattern(modules, isFunction, alignPosition[i], alignPosition[j]);
 8001822:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	5cd1      	ldrb	r1, [r2, r3]
 800182a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	460a      	mov	r2, r1
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f7ff fd42 	bl	80012c0 <drawAlignmentPattern>
 800183c:	e000      	b.n	8001840 <drawFunctionPatterns+0x210>
                    continue;  // Skip the three finder corners
 800183e:	bf00      	nop
            for (uint8_t j = 0; j < alignCount; j++) {
 8001840:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001844:	3301      	adds	r3, #1
 8001846:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800184a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800184e:	7ffb      	ldrb	r3, [r7, #31]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3ca      	bcc.n	80017ea <drawFunctionPatterns+0x1ba>
        for (uint8_t i = 0; i < alignCount; i++) {
 8001854:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001858:	3301      	adds	r3, #1
 800185a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800185e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001862:	7ffb      	ldrb	r3, [r7, #31]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3bc      	bcc.n	80017e2 <drawFunctionPatterns+0x1b2>
 8001868:	46ad      	mov	sp, r5
    }

#endif

    // Draw configuration data
    drawFormatBits(modules, isFunction, ecc, 0);  // Dummy mask value; overwritten later in the constructor
 800186a:	79ba      	ldrb	r2, [r7, #6]
 800186c:	2300      	movs	r3, #0
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f7ff fd72 	bl	800135a <drawFormatBits>
    drawVersion(modules, isFunction, version);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	461a      	mov	r2, r3
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff fe6b 	bl	8001558 <drawVersion>
}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bdb0      	pop	{r4, r5, r7, pc}
 800188a:	bf00      	nop
 800188c:	24924925 	.word	0x24924925

08001890 <drawCodewords>:


// Draws the given sequence of 8-bit codewords (data and error correction) onto the entire
// data area of this QR Code symbol. Function modules need to be marked off before this is called.
static void drawCodewords(BitBucket *modules, BitBucket *isFunction, BitBucket *codewords) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]

    uint32_t bitLength = codewords->bitOffsetOrWidth;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
    uint8_t *data = codewords->data;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	617b      	str	r3, [r7, #20]

    uint8_t size = modules->bitOffsetOrWidth;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	74fb      	strb	r3, [r7, #19]

    // Bit index into the data
    uint32_t i = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24

    // Do the funny zigzag scan
    for (int16_t right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 80018b2:	7cfb      	ldrb	r3, [r7, #19]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80018bc:	e06f      	b.n	800199e <drawCodewords+0x10e>
        if (right == 6) { right = 5; }
 80018be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d101      	bne.n	80018ca <drawCodewords+0x3a>
 80018c6:	2305      	movs	r3, #5
 80018c8:	847b      	strh	r3, [r7, #34]	; 0x22

        for (uint8_t vert = 0; vert < size; vert++) {  // Vertical counter
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80018d0:	e05c      	b.n	800198c <drawCodewords+0xfc>
            for (int j = 0; j < 2; j++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	e051      	b.n	800197c <drawCodewords+0xec>
                uint8_t x = right - j;  // Actual x coordinate
 80018d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	74bb      	strb	r3, [r7, #18]
                bool upwards = ((right & 2) == 0) ^ (x < 6);
 80018e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf0c      	ite	eq
 80018ee:	2301      	moveq	r3, #1
 80018f0:	2300      	movne	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	b25a      	sxtb	r2, r3
 80018f6:	7cbb      	ldrb	r3, [r7, #18]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	bf94      	ite	ls
 80018fc:	2301      	movls	r3, #1
 80018fe:	2300      	movhi	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	b25b      	sxtb	r3, r3
 8001904:	4053      	eors	r3, r2
 8001906:	b25b      	sxtb	r3, r3
 8001908:	747b      	strb	r3, [r7, #17]
                uint8_t y = upwards ? size - 1 - vert : vert;  // Actual y coordinate
 800190a:	7c7b      	ldrb	r3, [r7, #17]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d007      	beq.n	8001920 <drawCodewords+0x90>
 8001910:	7cfa      	ldrb	r2, [r7, #19]
 8001912:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	e001      	b.n	8001924 <drawCodewords+0x94>
 8001920:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001924:	743b      	strb	r3, [r7, #16]
                if (!bb_getBit(isFunction, x, y) && i < bitLength) {
 8001926:	7c3a      	ldrb	r2, [r7, #16]
 8001928:	7cbb      	ldrb	r3, [r7, #18]
 800192a:	4619      	mov	r1, r3
 800192c:	68b8      	ldr	r0, [r7, #8]
 800192e:	f7ff fb16 	bl	8000f5e <bb_getBit>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d11e      	bne.n	8001976 <drawCodewords+0xe6>
 8001938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	429a      	cmp	r2, r3
 800193e:	d21a      	bcs.n	8001976 <drawCodewords+0xe6>
                    bb_setBit(modules, x, y, ((data[i >> 3] >> (7 - (i & 7))) & 1) != 0);
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	08db      	lsrs	r3, r3, #3
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	43db      	mvns	r3, r3
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	fa42 f303 	asr.w	r3, r2, r3
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf14      	ite	ne
 8001960:	2301      	movne	r3, #1
 8001962:	2300      	moveq	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	7c3a      	ldrb	r2, [r7, #16]
 8001968:	7cb9      	ldrb	r1, [r7, #18]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff fa4d 	bl	8000e0a <bb_setBit>
                    i++;
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	3301      	adds	r3, #1
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
            for (int j = 0; j < 2; j++) {
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b01      	cmp	r3, #1
 8001980:	ddaa      	ble.n	80018d8 <drawCodewords+0x48>
        for (uint8_t vert = 0; vert < size; vert++) {  // Vertical counter
 8001982:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001986:	3301      	adds	r3, #1
 8001988:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800198c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	429a      	cmp	r2, r3
 8001994:	d39d      	bcc.n	80018d2 <drawCodewords+0x42>
    for (int16_t right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 8001996:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001998:	3b02      	subs	r3, #2
 800199a:	b29b      	uxth	r3, r3
 800199c:	847b      	strh	r3, [r7, #34]	; 0x22
 800199e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	dc8b      	bgt.n	80018be <drawCodewords+0x2e>
                // If there are any remainder bits (0 to 7), they are already
                // set to 0/false/white when the grid of modules was initialized
            }
        }
    }
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <getPenaltyScore>:
#define PENALTY_N4     10

// Calculates and returns the penalty score based on state of this QR Code's current modules.
// This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.
// @TODO: This can be optimized by working with the bytes instead of bits.
static uint32_t getPenaltyScore(BitBucket *modules) {
 80019ae:	b590      	push	{r4, r7, lr}
 80019b0:	b08d      	sub	sp, #52	; 0x34
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t size = modules->bitOffsetOrWidth;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	75fb      	strb	r3, [r7, #23]

    // Adjacent modules in row having same color
    for (uint8_t y = 0; y < size; y++) {
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80019c6:	e049      	b.n	8001a5c <getPenaltyScore+0xae>

        bool colorX = bb_getBit(modules, 0, y);
 80019c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019cc:	461a      	mov	r2, r3
 80019ce:	2100      	movs	r1, #0
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fac4 	bl	8000f5e <bb_getBit>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        for (uint8_t x = 1, runX = 1; x < size; x++) {
 80019dc:	2301      	movs	r3, #1
 80019de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80019e2:	2301      	movs	r3, #1
 80019e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80019e8:	e02e      	b.n	8001a48 <getPenaltyScore+0x9a>
            bool cx = bb_getBit(modules, x, y);
 80019ea:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80019ee:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80019f2:	4619      	mov	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fab2 	bl	8000f5e <bb_getBit>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73bb      	strb	r3, [r7, #14]
            if (cx != colorX) {
 80019fe:	7bba      	ldrb	r2, [r7, #14]
 8001a00:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d006      	beq.n	8001a16 <getPenaltyScore+0x68>
                colorX = cx;
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                runX = 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001a14:	e013      	b.n	8001a3e <getPenaltyScore+0x90>

            } else {
                runX++;
 8001a16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                if (runX == 5) {
 8001a20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d103      	bne.n	8001a30 <getPenaltyScore+0x82>
                    result += PENALTY_N1;
 8001a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2a:	3303      	adds	r3, #3
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a2e:	e006      	b.n	8001a3e <getPenaltyScore+0x90>
                } else if (runX > 5) {
 8001a30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d902      	bls.n	8001a3e <getPenaltyScore+0x90>
                    result++;
 8001a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t x = 1, runX = 1; x < size; x++) {
 8001a3e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a42:	3301      	adds	r3, #1
 8001a44:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001a48:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3cb      	bcc.n	80019ea <getPenaltyScore+0x3c>
    for (uint8_t y = 0; y < size; y++) {
 8001a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a56:	3301      	adds	r3, #1
 8001a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001a5c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a60:	7dfb      	ldrb	r3, [r7, #23]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3b0      	bcc.n	80019c8 <getPenaltyScore+0x1a>
            }
        }
    }

    // Adjacent modules in column having same color
    for (uint8_t x = 0; x < size; x++) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a6c:	e049      	b.n	8001b02 <getPenaltyScore+0x154>
        bool colorY = bb_getBit(modules, x, 0);
 8001a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a72:	2200      	movs	r2, #0
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fa71 	bl	8000f5e <bb_getBit>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t y = 1, runY = 1; y < size; y++) {
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001a8e:	e02e      	b.n	8001aee <getPenaltyScore+0x140>
            bool cy = bb_getBit(modules, x, y);
 8001a90:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a98:	4619      	mov	r1, r3
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fa5f 	bl	8000f5e <bb_getBit>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]
            if (cy != colorY) {
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d006      	beq.n	8001abc <getPenaltyScore+0x10e>
                colorY = cy;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                runY = 1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001aba:	e013      	b.n	8001ae4 <getPenaltyScore+0x136>
            } else {
                runY++;
 8001abc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                if (runY == 5) {
 8001ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d103      	bne.n	8001ad6 <getPenaltyScore+0x128>
                    result += PENALTY_N1;
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	3303      	adds	r3, #3
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad4:	e006      	b.n	8001ae4 <getPenaltyScore+0x136>
                } else if (runY > 5) {
 8001ad6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d902      	bls.n	8001ae4 <getPenaltyScore+0x136>
                    result++;
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t y = 1, runY = 1; y < size; y++) {
 8001ae4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001aee:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3cb      	bcc.n	8001a90 <getPenaltyScore+0xe2>
    for (uint8_t x = 0; x < size; x++) {
 8001af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001afc:	3301      	adds	r3, #1
 8001afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3b0      	bcc.n	8001a6e <getPenaltyScore+0xc0>
                }
            }
        }
    }

    uint16_t black = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	847b      	strh	r3, [r7, #34]	; 0x22
    for (uint8_t y = 0; y < size; y++) {
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001b16:	e08f      	b.n	8001c38 <getPenaltyScore+0x28a>
        uint16_t bitsRow = 0, bitsCol = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	83fb      	strh	r3, [r7, #30]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	83bb      	strh	r3, [r7, #28]
        for (uint8_t x = 0; x < size; x++) {
 8001b20:	2300      	movs	r3, #0
 8001b22:	76fb      	strb	r3, [r7, #27]
 8001b24:	e07e      	b.n	8001c24 <getPenaltyScore+0x276>
            bool color = bb_getBit(modules, x, y);
 8001b26:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001b2a:	7efb      	ldrb	r3, [r7, #27]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fa15 	bl	8000f5e <bb_getBit>
 8001b34:	4603      	mov	r3, r0
 8001b36:	74fb      	strb	r3, [r7, #19]

            // 2*2 blocks of modules having same color
            if (x > 0 && y > 0) {
 8001b38:	7efb      	ldrb	r3, [r7, #27]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d035      	beq.n	8001baa <getPenaltyScore+0x1fc>
 8001b3e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d031      	beq.n	8001baa <getPenaltyScore+0x1fc>
                bool colorUL = bb_getBit(modules, x - 1, y - 1);
 8001b46:	7efb      	ldrb	r3, [r7, #27]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b2d9      	uxtb	r1, r3
 8001b4c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fa01 	bl	8000f5e <bb_getBit>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	74bb      	strb	r3, [r7, #18]
                bool colorUR = bb_getBit(modules, x, y - 1);
 8001b60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	7efb      	ldrb	r3, [r7, #27]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff f9f6 	bl	8000f5e <bb_getBit>
 8001b72:	4603      	mov	r3, r0
 8001b74:	747b      	strb	r3, [r7, #17]
                bool colorL = bb_getBit(modules, x - 1, y);
 8001b76:	7efb      	ldrb	r3, [r7, #27]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001b80:	4619      	mov	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff f9eb 	bl	8000f5e <bb_getBit>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	743b      	strb	r3, [r7, #16]
                if (color == colorUL && color == colorUR && color == colorL) {
 8001b8c:	7cfa      	ldrb	r2, [r7, #19]
 8001b8e:	7cbb      	ldrb	r3, [r7, #18]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d10a      	bne.n	8001baa <getPenaltyScore+0x1fc>
 8001b94:	7cfa      	ldrb	r2, [r7, #19]
 8001b96:	7c7b      	ldrb	r3, [r7, #17]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d106      	bne.n	8001baa <getPenaltyScore+0x1fc>
 8001b9c:	7cfa      	ldrb	r2, [r7, #19]
 8001b9e:	7c3b      	ldrb	r3, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d102      	bne.n	8001baa <getPenaltyScore+0x1fc>
                    result += PENALTY_N2;
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	3303      	adds	r3, #3
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            // Finder-like pattern in rows and columns
            bitsRow = ((bitsRow << 1) & 0x7FF) | color;
 8001baa:	8bfb      	ldrh	r3, [r7, #30]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	7cfb      	ldrb	r3, [r7, #19]
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	83fb      	strh	r3, [r7, #30]
            bitsCol = ((bitsCol << 1) & 0x7FF) | bb_getBit(modules, y, x);
 8001bc0:	8bbb      	ldrh	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bca:	b21c      	sxth	r4, r3
 8001bcc:	7efa      	ldrb	r2, [r7, #27]
 8001bce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff f9c2 	bl	8000f5e <bb_getBit>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4323      	orrs	r3, r4
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	83bb      	strh	r3, [r7, #28]

            // Needs 11 bits accumulated
            if (x >= 10) {
 8001be4:	7efb      	ldrb	r3, [r7, #27]
 8001be6:	2b09      	cmp	r3, #9
 8001be8:	d913      	bls.n	8001c12 <getPenaltyScore+0x264>
                if (bitsRow == 0x05D || bitsRow == 0x5D0) {
 8001bea:	8bfb      	ldrh	r3, [r7, #30]
 8001bec:	2b5d      	cmp	r3, #93	; 0x5d
 8001bee:	d003      	beq.n	8001bf8 <getPenaltyScore+0x24a>
 8001bf0:	8bfb      	ldrh	r3, [r7, #30]
 8001bf2:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8001bf6:	d102      	bne.n	8001bfe <getPenaltyScore+0x250>
                    result += PENALTY_N3;
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	3328      	adds	r3, #40	; 0x28
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                if (bitsCol == 0x05D || bitsCol == 0x5D0) {
 8001bfe:	8bbb      	ldrh	r3, [r7, #28]
 8001c00:	2b5d      	cmp	r3, #93	; 0x5d
 8001c02:	d003      	beq.n	8001c0c <getPenaltyScore+0x25e>
 8001c04:	8bbb      	ldrh	r3, [r7, #28]
 8001c06:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8001c0a:	d102      	bne.n	8001c12 <getPenaltyScore+0x264>
                    result += PENALTY_N3;
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	3328      	adds	r3, #40	; 0x28
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            // Balance of black and white modules
            if (color) { black++; }
 8001c12:	7cfb      	ldrb	r3, [r7, #19]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <getPenaltyScore+0x270>
 8001c18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	847b      	strh	r3, [r7, #34]	; 0x22
        for (uint8_t x = 0; x < size; x++) {
 8001c1e:	7efb      	ldrb	r3, [r7, #27]
 8001c20:	3301      	adds	r3, #1
 8001c22:	76fb      	strb	r3, [r7, #27]
 8001c24:	7efa      	ldrb	r2, [r7, #27]
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f4ff af7c 	bcc.w	8001b26 <getPenaltyScore+0x178>
    for (uint8_t y = 0; y < size; y++) {
 8001c2e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001c32:	3301      	adds	r3, #1
 8001c34:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001c38:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	f4ff af6a 	bcc.w	8001b18 <getPenaltyScore+0x16a>
        }
    }

    // Find smallest k such that (45-5k)% <= dark/total <= (55+5k)%
    uint16_t total = size * size;
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	fb12 f303 	smulbb	r3, r2, r3
 8001c50:	82bb      	strh	r3, [r7, #20]
    for (uint16_t k = 0; black * 20 < (9 - k) * total || black * 20 > (11 + k) * total; k++) {
 8001c52:	2300      	movs	r3, #0
 8001c54:	833b      	strh	r3, [r7, #24]
 8001c56:	e005      	b.n	8001c64 <getPenaltyScore+0x2b6>
        result += PENALTY_N4;
 8001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5a:	330a      	adds	r3, #10
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint16_t k = 0; black * 20 < (9 - k) * total || black * 20 > (11 + k) * total; k++) {
 8001c5e:	8b3b      	ldrh	r3, [r7, #24]
 8001c60:	3301      	adds	r3, #1
 8001c62:	833b      	strh	r3, [r7, #24]
 8001c64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	8b3b      	ldrh	r3, [r7, #24]
 8001c72:	f1c3 0309 	rsb	r3, r3, #9
 8001c76:	8aba      	ldrh	r2, [r7, #20]
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	4299      	cmp	r1, r3
 8001c7e:	dbeb      	blt.n	8001c58 <getPenaltyScore+0x2aa>
 8001c80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	8b3b      	ldrh	r3, [r7, #24]
 8001c8e:	330b      	adds	r3, #11
 8001c90:	8aba      	ldrh	r2, [r7, #20]
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	4299      	cmp	r1, r3
 8001c98:	dcde      	bgt.n	8001c58 <getPenaltyScore+0x2aa>
    }

    return result;
 8001c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3734      	adds	r7, #52	; 0x34
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd90      	pop	{r4, r7, pc}

08001ca4 <rs_multiply>:


#pragma mark - Reed-Solomon Generator

static uint8_t rs_multiply(uint8_t x, uint8_t y) {
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	460a      	mov	r2, r1
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71bb      	strb	r3, [r7, #6]
    // Russian peasant multiplication
    // See: https://en.wikipedia.org/wiki/Ancient_Egyptian_multiplication
    uint16_t z = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 7; i >= 0; i--) {
 8001cb8:	2307      	movs	r3, #7
 8001cba:	737b      	strb	r3, [r7, #13]
 8001cbc:	e02c      	b.n	8001d18 <rs_multiply+0x74>
        z = (z << 1) ^ ((z >> 7) * 0x11D);
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	89fb      	ldrh	r3, [r7, #14]
 8001cc6:	09db      	lsrs	r3, r3, #7
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	00c9      	lsls	r1, r1, #3
 8001cce:	4419      	add	r1, r3
 8001cd0:	0049      	lsls	r1, r1, #1
 8001cd2:	440b      	add	r3, r1
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	0109      	lsls	r1, r1, #4
 8001cd8:	1acb      	subs	r3, r1, r3
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	4053      	eors	r3, r2
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	81fb      	strh	r3, [r7, #14]
        z ^= ((y >> i) & 1) * x;
 8001ce4:	79ba      	ldrb	r2, [r7, #6]
 8001ce6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cea:	fa42 f303 	asr.w	r3, r2, r3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	fb12 f303 	smulbb	r3, r2, r3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d06:	4053      	eors	r3, r2
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 7; i >= 0; i--) {
 8001d0c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	737b      	strb	r3, [r7, #13]
 8001d18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	dace      	bge.n	8001cbe <rs_multiply+0x1a>
    }
    return z;
 8001d20:	89fb      	ldrh	r3, [r7, #14]
 8001d22:	b2db      	uxtb	r3, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <rs_init>:

static void rs_init(uint8_t degree, uint8_t *coeff) {
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
    memset(coeff, 0, degree);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2100      	movs	r1, #0
 8001d42:	6838      	ldr	r0, [r7, #0]
 8001d44:	f000 fd0b 	bl	800275e <memset>
    coeff[degree - 1] = 1;
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]

    // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),
    // drop the highest term, and store the rest of the coefficients in order of descending powers.
    // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).
    uint16_t root = 1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < degree; i++) {
 8001d58:	2300      	movs	r3, #0
 8001d5a:	737b      	strb	r3, [r7, #13]
 8001d5c:	e040      	b.n	8001de0 <rs_init+0xb0>
        // Multiply the current product by (x - r^i)
        for (uint8_t j = 0; j < degree; j++) {
 8001d5e:	2300      	movs	r3, #0
 8001d60:	733b      	strb	r3, [r7, #12]
 8001d62:	e023      	b.n	8001dac <rs_init+0x7c>
            coeff[j] = rs_multiply(coeff[j], root);
 8001d64:	7b3b      	ldrb	r3, [r7, #12]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	4413      	add	r3, r2
 8001d6a:	7818      	ldrb	r0, [r3, #0]
 8001d6c:	89fb      	ldrh	r3, [r7, #14]
 8001d6e:	b2d9      	uxtb	r1, r3
 8001d70:	7b3b      	ldrb	r3, [r7, #12]
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	18d4      	adds	r4, r2, r3
 8001d76:	f7ff ff95 	bl	8001ca4 <rs_multiply>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	7023      	strb	r3, [r4, #0]
            if (j + 1 < degree) {
 8001d7e:	7b3b      	ldrb	r3, [r7, #12]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	da0e      	bge.n	8001da6 <rs_init+0x76>
                coeff[j] ^= coeff[j + 1];
 8001d88:	7b3b      	ldrb	r3, [r7, #12]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	7819      	ldrb	r1, [r3, #0]
 8001d90:	7b3b      	ldrb	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	781a      	ldrb	r2, [r3, #0]
 8001d9a:	7b3b      	ldrb	r3, [r7, #12]
 8001d9c:	6838      	ldr	r0, [r7, #0]
 8001d9e:	4403      	add	r3, r0
 8001da0:	404a      	eors	r2, r1
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < degree; j++) {
 8001da6:	7b3b      	ldrb	r3, [r7, #12]
 8001da8:	3301      	adds	r3, #1
 8001daa:	733b      	strb	r3, [r7, #12]
 8001dac:	7b3a      	ldrb	r2, [r7, #12]
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d3d7      	bcc.n	8001d64 <rs_init+0x34>
            }
        }
        root = (root << 1) ^ ((root >> 7) * 0x11D);  // Multiply by 0x02 mod GF(2^8/0x11D)
 8001db4:	89fb      	ldrh	r3, [r7, #14]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	89fb      	ldrh	r3, [r7, #14]
 8001dbc:	09db      	lsrs	r3, r3, #7
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	00c9      	lsls	r1, r1, #3
 8001dc4:	4419      	add	r1, r3
 8001dc6:	0049      	lsls	r1, r1, #1
 8001dc8:	440b      	add	r3, r1
 8001dca:	4619      	mov	r1, r3
 8001dcc:	0109      	lsls	r1, r1, #4
 8001dce:	1acb      	subs	r3, r1, r3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	4053      	eors	r3, r2
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < degree; i++) {
 8001dda:	7b7b      	ldrb	r3, [r7, #13]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	737b      	strb	r3, [r7, #13]
 8001de0:	7b7a      	ldrb	r2, [r7, #13]
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d3ba      	bcc.n	8001d5e <rs_init+0x2e>
    }
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd90      	pop	{r4, r7, pc}

08001df0 <rs_getRemainder>:

static void rs_getRemainder(uint8_t degree, uint8_t *coeff, uint8_t *data, uint8_t length, uint8_t *result, uint8_t stride) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	4613      	mov	r3, r2
 8001e02:	73bb      	strb	r3, [r7, #14]
    // Compute the remainder by performing polynomial division

    //for (uint8_t i = 0; i < degree; i++) { result[] = 0; }
    //memset(result, 0, degree);

    for (uint8_t i = 0; i < length; i++) {
 8001e04:	2300      	movs	r3, #0
 8001e06:	75fb      	strb	r3, [r7, #23]
 8001e08:	e05b      	b.n	8001ec2 <rs_getRemainder+0xd2>
        uint8_t factor = data[i] ^ result[0];
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781a      	ldrb	r2, [r3, #0]
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	4053      	eors	r3, r2
 8001e18:	753b      	strb	r3, [r7, #20]
        for (uint8_t j = 1; j < degree; j++) {
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75bb      	strb	r3, [r7, #22]
 8001e1e:	e015      	b.n	8001e4c <rs_getRemainder+0x5c>
            result[(j - 1) * stride] = result[j * stride];
 8001e20:	7dbb      	ldrb	r3, [r7, #22]
 8001e22:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	441a      	add	r2, r3
 8001e30:	7dbb      	ldrb	r3, [r7, #22]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001e38:	fb01 f303 	mul.w	r3, r1, r3
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	440b      	add	r3, r1
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 1; j < degree; j++) {
 8001e46:	7dbb      	ldrb	r3, [r7, #22]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	75bb      	strb	r3, [r7, #22]
 8001e4c:	7dba      	ldrb	r2, [r7, #22]
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d3e5      	bcc.n	8001e20 <rs_getRemainder+0x30>
        }
        result[(degree - 1) * stride] = 0;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e5c:	fb02 f303 	mul.w	r3, r2, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	4413      	add	r3, r2
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]

        for (uint8_t j = 0; j < degree; j++) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	757b      	strb	r3, [r7, #21]
 8001e6e:	e021      	b.n	8001eb4 <rs_getRemainder+0xc4>
            result[j * stride] ^= rs_multiply(coeff[j], factor);
 8001e70:	7d7b      	ldrb	r3, [r7, #21]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	4413      	add	r3, r2
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	7d3a      	ldrb	r2, [r7, #20]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff11 	bl	8001ca4 <rs_multiply>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4618      	mov	r0, r3
 8001e86:	7d7b      	ldrb	r3, [r7, #21]
 8001e88:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e8c:	fb02 f303 	mul.w	r3, r2, r3
 8001e90:	461a      	mov	r2, r3
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	4413      	add	r3, r2
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	7d7b      	ldrb	r3, [r7, #21]
 8001e9a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	440b      	add	r3, r1
 8001ea8:	4042      	eors	r2, r0
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < degree; j++) {
 8001eae:	7d7b      	ldrb	r3, [r7, #21]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	757b      	strb	r3, [r7, #21]
 8001eb4:	7d7a      	ldrb	r2, [r7, #21]
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d3d9      	bcc.n	8001e70 <rs_getRemainder+0x80>
    for (uint8_t i = 0; i < length; i++) {
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	75fb      	strb	r3, [r7, #23]
 8001ec2:	7dfa      	ldrb	r2, [r7, #23]
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d39f      	bcc.n	8001e0a <rs_getRemainder+0x1a>
        }
    }
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <encodeDataCodewords>:



#pragma mark - QrCode

static int8_t encodeDataCodewords(BitBucket *dataCodewords, const uint8_t *text, uint16_t length, uint8_t version) {
 8001ed2:	b590      	push	{r4, r7, lr}
 8001ed4:	b089      	sub	sp, #36	; 0x24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	4611      	mov	r1, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	80fb      	strh	r3, [r7, #6]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	717b      	strb	r3, [r7, #5]
    int8_t mode = MODE_BYTE;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	77fb      	strb	r3, [r7, #31]

    if (isNumeric((char*)text, length)) {
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	68b8      	ldr	r0, [r7, #8]
 8001ef2:	f7fe fe98 	bl	8000c26 <isNumeric>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d050      	beq.n	8001f9e <encodeDataCodewords+0xcc>
        mode = MODE_NUMERIC;
 8001efc:	2300      	movs	r3, #0
 8001efe:	77fb      	strb	r3, [r7, #31]
        bb_appendBits(dataCodewords, 1 << MODE_NUMERIC, 4);
 8001f00:	2204      	movs	r2, #4
 8001f02:	2101      	movs	r1, #1
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7fe ff3f 	bl	8000d88 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_NUMERIC));
 8001f0a:	88fc      	ldrh	r4, [r7, #6]
 8001f0c:	797b      	ldrb	r3, [r7, #5]
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fea9 	bl	8000c68 <getModeBits>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7fe ff33 	bl	8000d88 <bb_appendBits>

        uint16_t accumData = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	83bb      	strh	r3, [r7, #28]
        uint8_t accumCount = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	76fb      	strb	r3, [r7, #27]
        for (uint16_t i = 0; i < length; i++) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	833b      	strh	r3, [r7, #24]
 8001f2e:	e021      	b.n	8001f74 <encodeDataCodewords+0xa2>
            accumData = accumData * 10 + ((char)(text[i]) - '0');
 8001f30:	8bbb      	ldrh	r3, [r7, #28]
 8001f32:	461a      	mov	r2, r3
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	8b3b      	ldrh	r3, [r7, #24]
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	440b      	add	r3, r1
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b30      	subs	r3, #48	; 0x30
 8001f4c:	83bb      	strh	r3, [r7, #28]
            accumCount++;
 8001f4e:	7efb      	ldrb	r3, [r7, #27]
 8001f50:	3301      	adds	r3, #1
 8001f52:	76fb      	strb	r3, [r7, #27]
            if (accumCount == 3) {
 8001f54:	7efb      	ldrb	r3, [r7, #27]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d109      	bne.n	8001f6e <encodeDataCodewords+0x9c>
                bb_appendBits(dataCodewords, accumData, 10);
 8001f5a:	8bbb      	ldrh	r3, [r7, #28]
 8001f5c:	220a      	movs	r2, #10
 8001f5e:	4619      	mov	r1, r3
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f7fe ff11 	bl	8000d88 <bb_appendBits>
                accumData = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	83bb      	strh	r3, [r7, #28]
                accumCount = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	76fb      	strb	r3, [r7, #27]
        for (uint16_t i = 0; i < length; i++) {
 8001f6e:	8b3b      	ldrh	r3, [r7, #24]
 8001f70:	3301      	adds	r3, #1
 8001f72:	833b      	strh	r3, [r7, #24]
 8001f74:	8b3a      	ldrh	r2, [r7, #24]
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d3d9      	bcc.n	8001f30 <encodeDataCodewords+0x5e>
            }
        }

        // 1 or 2 digits remaining
        if (accumCount > 0) {
 8001f7c:	7efb      	ldrb	r3, [r7, #27]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <encodeDataCodewords+0x1c0>
            bb_appendBits(dataCodewords, accumData, accumCount * 3 + 1);
 8001f84:	8bb9      	ldrh	r1, [r7, #28]
 8001f86:	7efb      	ldrb	r3, [r7, #27]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	0052      	lsls	r2, r2, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f7fe fef6 	bl	8000d88 <bb_appendBits>
 8001f9c:	e079      	b.n	8002092 <encodeDataCodewords+0x1c0>
        }

    } else if (isAlphanumeric((char*)text, length)) {
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	68b8      	ldr	r0, [r7, #8]
 8001fa4:	f7fe fe20 	bl	8000be8 <isAlphanumeric>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d04d      	beq.n	800204a <encodeDataCodewords+0x178>
        mode = MODE_ALPHANUMERIC;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	77fb      	strb	r3, [r7, #31]
        bb_appendBits(dataCodewords, 1 << MODE_ALPHANUMERIC, 4);
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7fe fee6 	bl	8000d88 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_ALPHANUMERIC));
 8001fbc:	88fc      	ldrh	r4, [r7, #6]
 8001fbe:	797b      	ldrb	r3, [r7, #5]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fe50 	bl	8000c68 <getModeBits>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4621      	mov	r1, r4
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f7fe feda 	bl	8000d88 <bb_appendBits>

        uint16_t accumData = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	82fb      	strh	r3, [r7, #22]
        uint8_t accumCount = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	757b      	strb	r3, [r7, #21]
        for (uint16_t i = 0; i  < length; i++) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	827b      	strh	r3, [r7, #18]
 8001fe0:	e025      	b.n	800202e <encodeDataCodewords+0x15c>
            accumData = accumData * 45 + getAlphanumeric((char)(text[i]));
 8001fe2:	8afb      	ldrh	r3, [r7, #22]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	0052      	lsls	r2, r2, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	461a      	mov	r2, r3
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	b29c      	uxth	r4, r3
 8001ff2:	8a7b      	ldrh	r3, [r7, #18]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fd82 	bl	8000b04 <getAlphanumeric>
 8002000:	4603      	mov	r3, r0
 8002002:	b29b      	uxth	r3, r3
 8002004:	4423      	add	r3, r4
 8002006:	82fb      	strh	r3, [r7, #22]
            accumCount++;
 8002008:	7d7b      	ldrb	r3, [r7, #21]
 800200a:	3301      	adds	r3, #1
 800200c:	757b      	strb	r3, [r7, #21]
            if (accumCount == 2) {
 800200e:	7d7b      	ldrb	r3, [r7, #21]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d109      	bne.n	8002028 <encodeDataCodewords+0x156>
                bb_appendBits(dataCodewords, accumData, 11);
 8002014:	8afb      	ldrh	r3, [r7, #22]
 8002016:	220b      	movs	r2, #11
 8002018:	4619      	mov	r1, r3
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7fe feb4 	bl	8000d88 <bb_appendBits>
                accumData = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	82fb      	strh	r3, [r7, #22]
                accumCount = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	757b      	strb	r3, [r7, #21]
        for (uint16_t i = 0; i  < length; i++) {
 8002028:	8a7b      	ldrh	r3, [r7, #18]
 800202a:	3301      	adds	r3, #1
 800202c:	827b      	strh	r3, [r7, #18]
 800202e:	8a7a      	ldrh	r2, [r7, #18]
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	429a      	cmp	r2, r3
 8002034:	d3d5      	bcc.n	8001fe2 <encodeDataCodewords+0x110>
            }
        }

        // 1 character remaining
        if (accumCount > 0) {
 8002036:	7d7b      	ldrb	r3, [r7, #21]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d02a      	beq.n	8002092 <encodeDataCodewords+0x1c0>
            bb_appendBits(dataCodewords, accumData, 6);
 800203c:	8afb      	ldrh	r3, [r7, #22]
 800203e:	2206      	movs	r2, #6
 8002040:	4619      	mov	r1, r3
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f7fe fea0 	bl	8000d88 <bb_appendBits>
 8002048:	e023      	b.n	8002092 <encodeDataCodewords+0x1c0>
        }

    } else {
        bb_appendBits(dataCodewords, 1 << MODE_BYTE, 4);
 800204a:	2204      	movs	r2, #4
 800204c:	2104      	movs	r1, #4
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7fe fe9a 	bl	8000d88 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_BYTE));
 8002054:	88fc      	ldrh	r4, [r7, #6]
 8002056:	797b      	ldrb	r3, [r7, #5]
 8002058:	2102      	movs	r1, #2
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fe04 	bl	8000c68 <getModeBits>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4621      	mov	r1, r4
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7fe fe8e 	bl	8000d88 <bb_appendBits>
        for (uint16_t i = 0; i < length; i++) {
 800206c:	2300      	movs	r3, #0
 800206e:	823b      	strh	r3, [r7, #16]
 8002070:	e00b      	b.n	800208a <encodeDataCodewords+0x1b8>
            bb_appendBits(dataCodewords, (char)(text[i]), 8);
 8002072:	8a3b      	ldrh	r3, [r7, #16]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2208      	movs	r2, #8
 800207c:	4619      	mov	r1, r3
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7fe fe82 	bl	8000d88 <bb_appendBits>
        for (uint16_t i = 0; i < length; i++) {
 8002084:	8a3b      	ldrh	r3, [r7, #16]
 8002086:	3301      	adds	r3, #1
 8002088:	823b      	strh	r3, [r7, #16]
 800208a:	8a3a      	ldrh	r2, [r7, #16]
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	429a      	cmp	r2, r3
 8002090:	d3ef      	bcc.n	8002072 <encodeDataCodewords+0x1a0>
        }
    }

    //bb_setBits(dataCodewords, length, 4, getModeBits(version, mode));

    return mode;
 8002092:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd90      	pop	{r4, r7, pc}
	...

080020a0 <performErrorCorrection>:

static void performErrorCorrection(uint8_t version, uint8_t ecc, BitBucket *data) {
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	b090      	sub	sp, #64	; 0x40
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	4603      	mov	r3, r0
 80020a8:	603a      	str	r2, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
 80020ac:	460b      	mov	r3, r1
 80020ae:	71bb      	strb	r3, [r7, #6]
 80020b0:	466b      	mov	r3, sp
 80020b2:	461d      	mov	r5, r3

    // See: http://www.thonky.com/qr-code-tutorial/structure-final-message

#if LOCK_VERSION == 0
    uint8_t numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecc][version - 1];
 80020b4:	79ba      	ldrb	r2, [r7, #6]
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	1e59      	subs	r1, r3, #1
 80020ba:	48a6      	ldr	r0, [pc, #664]	; (8002354 <performErrorCorrection+0x2b4>)
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4403      	add	r3, r0
 80020c6:	440b      	add	r3, r1
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint16_t totalEcc = NUM_ERROR_CORRECTION_CODEWORDS[ecc][version - 1];
 80020ce:	79ba      	ldrb	r2, [r7, #6]
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	1e59      	subs	r1, r3, #1
 80020d4:	48a0      	ldr	r0, [pc, #640]	; (8002358 <performErrorCorrection+0x2b8>)
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80020e4:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	4a9c      	ldr	r2, [pc, #624]	; (800235c <performErrorCorrection+0x2bc>)
 80020ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020f0:	843b      	strh	r3, [r7, #32]
    uint8_t numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecc];
    uint16_t totalEcc = NUM_ERROR_CORRECTION_CODEWORDS[ecc];
    uint16_t moduleCount = NUM_RAW_DATA_MODULES;
#endif

    uint8_t blockEccLen = totalEcc / numBlocks;
 80020f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80020f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80020f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80020fc:	77fb      	strb	r3, [r7, #31]
    uint8_t numShortBlocks = numBlocks - moduleCount / 8 % numBlocks;
 80020fe:	8c3b      	ldrh	r3, [r7, #32]
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800210a:	fb92 f1f3 	sdiv	r1, r2, r3
 800210e:	fb03 f301 	mul.w	r3, r3, r1
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	77bb      	strb	r3, [r7, #30]
    uint8_t shortBlockLen = moduleCount / 8 / numBlocks;
 800211e:	8c3b      	ldrh	r3, [r7, #32]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800212a:	fb92 f3f3 	sdiv	r3, r2, r3
 800212e:	777b      	strb	r3, [r7, #29]

    uint8_t shortDataBlockLen = shortBlockLen - blockEccLen;
 8002130:	7f7a      	ldrb	r2, [r7, #29]
 8002132:	7ffb      	ldrb	r3, [r7, #31]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	773b      	strb	r3, [r7, #28]

    uint8_t result[data->capacityBytes];
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	8898      	ldrh	r0, [r3, #4]
 800213c:	4603      	mov	r3, r0
 800213e:	3b01      	subs	r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	b281      	uxth	r1, r0
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	f04f 0400 	mov.w	r4, #0
 8002150:	00d4      	lsls	r4, r2, #3
 8002152:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002156:	00cb      	lsls	r3, r1, #3
 8002158:	b281      	uxth	r1, r0
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	f04f 0400 	mov.w	r4, #0
 8002166:	00d4      	lsls	r4, r2, #3
 8002168:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800216c:	00cb      	lsls	r3, r1, #3
 800216e:	4603      	mov	r3, r0
 8002170:	3307      	adds	r3, #7
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	ebad 0d03 	sub.w	sp, sp, r3
 800217a:	ab02      	add	r3, sp, #8
 800217c:	3300      	adds	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
    memset(result, 0, sizeof(result));
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	4602      	mov	r2, r0
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fae9 	bl	800275e <memset>

    uint8_t coeff[blockEccLen];
 800218c:	7ff8      	ldrb	r0, [r7, #31]
 800218e:	4603      	mov	r3, r0
 8002190:	3b01      	subs	r3, #1
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	b2c1      	uxtb	r1, r0
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	f04f 0400 	mov.w	r4, #0
 80021a2:	00d4      	lsls	r4, r2, #3
 80021a4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80021a8:	00cb      	lsls	r3, r1, #3
 80021aa:	b2c1      	uxtb	r1, r0
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	f04f 0400 	mov.w	r4, #0
 80021b8:	00d4      	lsls	r4, r2, #3
 80021ba:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80021be:	00cb      	lsls	r3, r1, #3
 80021c0:	4603      	mov	r3, r0
 80021c2:	3307      	adds	r3, #7
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	ebad 0d03 	sub.w	sp, sp, r3
 80021cc:	ab02      	add	r3, sp, #8
 80021ce:	3300      	adds	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
    rs_init(blockEccLen, coeff);
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	7ffb      	ldrb	r3, [r7, #31]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fda9 	bl	8001d30 <rs_init>

    uint16_t offset = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint8_t *dataBytes = data->data;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c


    // Interleave all short blocks
    for (uint8_t i = 0; i < shortDataBlockLen; i++) {
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80021ee:	e033      	b.n	8002258 <performErrorCorrection+0x1b8>
        uint16_t index = i;
 80021f0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80021f4:	867b      	strh	r3, [r7, #50]	; 0x32
        uint8_t stride = shortDataBlockLen;
 80021f6:	7f3b      	ldrb	r3, [r7, #28]
 80021f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002202:	e01e      	b.n	8002242 <performErrorCorrection+0x1a2>
            result[offset++] = dataBytes[index];
 8002204:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002208:	441a      	add	r2, r3
 800220a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	8579      	strh	r1, [r7, #42]	; 0x2a
 8002210:	4619      	mov	r1, r3
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	545a      	strb	r2, [r3, r1]

#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
            if (blockNum == numShortBlocks) { stride++; }
 8002218:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800221c:	7fbb      	ldrb	r3, [r7, #30]
 800221e:	429a      	cmp	r2, r3
 8002220:	d104      	bne.n	800222c <performErrorCorrection+0x18c>
 8002222:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002226:	3301      	adds	r3, #1
 8002228:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
#endif
            index += stride;
 800222c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002230:	b29a      	uxth	r2, r3
 8002232:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002234:	4413      	add	r3, r2
 8002236:	867b      	strh	r3, [r7, #50]	; 0x32
        for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8002238:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800223c:	3301      	adds	r3, #1
 800223e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002242:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002246:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800224a:	429a      	cmp	r2, r3
 800224c:	d3da      	bcc.n	8002204 <performErrorCorrection+0x164>
    for (uint8_t i = 0; i < shortDataBlockLen; i++) {
 800224e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002252:	3301      	adds	r3, #1
 8002254:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8002258:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 800225c:	7f3b      	ldrb	r3, [r7, #28]
 800225e:	429a      	cmp	r2, r3
 8002260:	d3c6      	bcc.n	80021f0 <performErrorCorrection+0x150>

    // Version less than 5 only have short blocks
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
    {
        // Interleave long blocks
        uint16_t index = shortDataBlockLen * (numShortBlocks + 1);
 8002262:	7f3b      	ldrb	r3, [r7, #28]
 8002264:	b29a      	uxth	r2, r3
 8002266:	7fbb      	ldrb	r3, [r7, #30]
 8002268:	3301      	adds	r3, #1
 800226a:	b29b      	uxth	r3, r3
 800226c:	fb12 f303 	smulbb	r3, r2, r3
 8002270:	86fb      	strh	r3, [r7, #54]	; 0x36
        uint8_t stride = shortDataBlockLen;
 8002272:	7f3b      	ldrb	r3, [r7, #28]
 8002274:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        for (uint8_t blockNum = 0; blockNum < numBlocks - numShortBlocks; blockNum++) {
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800227e:	e01d      	b.n	80022bc <performErrorCorrection+0x21c>
            result[offset++] = dataBytes[index];
 8002280:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002284:	441a      	add	r2, r3
 8002286:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002288:	1c59      	adds	r1, r3, #1
 800228a:	8579      	strh	r1, [r7, #42]	; 0x2a
 800228c:	4619      	mov	r1, r3
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	545a      	strb	r2, [r3, r1]

            if (blockNum == 0) { stride++; }
 8002294:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d104      	bne.n	80022a6 <performErrorCorrection+0x206>
 800229c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80022a0:	3301      	adds	r3, #1
 80022a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            index += stride;
 80022a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022ae:	4413      	add	r3, r2
 80022b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        for (uint8_t blockNum = 0; blockNum < numBlocks - numShortBlocks; blockNum++) {
 80022b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022b6:	3301      	adds	r3, #1
 80022b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80022bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80022c0:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80022c4:	7fbb      	ldrb	r3, [r7, #30]
 80022c6:	1acb      	subs	r3, r1, r3
 80022c8:	429a      	cmp	r2, r3
 80022ca:	dbd9      	blt.n	8002280 <performErrorCorrection+0x1e0>
        }
    }
#endif

    // Add all ecc blocks, interleaved
    uint8_t blockSize = shortDataBlockLen;
 80022cc:	7f3b      	ldrb	r3, [r7, #28]
 80022ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80022d8:	e025      	b.n	8002326 <performErrorCorrection+0x286>

#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
        if (blockNum == numShortBlocks) { blockSize++; }
 80022da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80022de:	7fbb      	ldrb	r3, [r7, #30]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d104      	bne.n	80022ee <performErrorCorrection+0x24e>
 80022e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e8:	3301      	adds	r3, #1
 80022ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
        rs_getRemainder(blockEccLen, coeff, dataBytes, blockSize, &result[offset + blockNum], numBlocks);
 80022ee:	68f9      	ldr	r1, [r7, #12]
 80022f0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80022f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80022f6:	4413      	add	r3, r2
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4413      	add	r3, r2
 80022fc:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8002300:	7ff8      	ldrb	r0, [r7, #31]
 8002302:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002306:	9201      	str	r2, [sp, #4]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	4623      	mov	r3, r4
 800230c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230e:	f7ff fd6f 	bl	8001df0 <rs_getRemainder>
        dataBytes += blockSize;
 8002312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002318:	4413      	add	r3, r2
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 800231c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002320:	3301      	adds	r3, #1
 8002322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002326:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800232a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800232e:	429a      	cmp	r2, r3
 8002330:	d3d3      	bcc.n	80022da <performErrorCorrection+0x23a>
    }

    memcpy(data->data, result, data->capacityBytes);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6898      	ldr	r0, [r3, #8]
 8002336:	6979      	ldr	r1, [r7, #20]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	889b      	ldrh	r3, [r3, #4]
 800233c:	461a      	mov	r2, r3
 800233e:	f000 fa03 	bl	8002748 <memcpy>
    data->bitOffsetOrWidth = moduleCount;
 8002342:	8c3a      	ldrh	r2, [r7, #32]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	46ad      	mov	sp, r5
}
 800234a:	bf00      	nop
 800234c:	3738      	adds	r7, #56	; 0x38
 800234e:	46bd      	mov	sp, r7
 8002350:	bdb0      	pop	{r4, r5, r7, pc}
 8002352:	bf00      	nop
 8002354:	08002a3c 	.word	0x08002a3c
 8002358:	080028fc 	.word	0x080028fc
 800235c:	08002adc 	.word	0x08002adc

08002360 <qrcode_getBufferSize>:
static const uint8_t ECC_FORMAT_BITS = (0x02 << 6) | (0x03 << 4) | (0x00 << 2) | (0x01 << 0);


#pragma mark - Public QRCode functions

uint16_t qrcode_getBufferSize(uint8_t version) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
    return bb_getGridSizeBytes(4 * version + 17);
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3311      	adds	r3, #17
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fca9 	bl	8000ccc <bb_getGridSizeBytes>
 800237a:	4603      	mov	r3, r0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <qrcode_initBytes>:

// @TODO: Return error if data is too big.
int8_t qrcode_initBytes(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, uint8_t *data, uint16_t length) {
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	b09b      	sub	sp, #108	; 0x6c
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	460b      	mov	r3, r1
 8002394:	71fb      	strb	r3, [r7, #7]
 8002396:	4613      	mov	r3, r2
 8002398:	71bb      	strb	r3, [r7, #6]
 800239a:	466b      	mov	r3, sp
 800239c:	461d      	mov	r5, r3
    uint8_t size = version * 4 + 17;
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3311      	adds	r3, #17
 80023a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    qrcode->version = version;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	79fa      	ldrb	r2, [r7, #7]
 80023ae:	701a      	strb	r2, [r3, #0]
    qrcode->size = size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80023b6:	705a      	strb	r2, [r3, #1]
    qrcode->ecc = ecc;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	79ba      	ldrb	r2, [r7, #6]
 80023bc:	709a      	strb	r2, [r3, #2]
    qrcode->modules = modules;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	609a      	str	r2, [r3, #8]

    uint8_t eccFormatBits = (ECC_FORMAT_BITS >> (2 * ecc)) & 0x03;
 80023c4:	23b1      	movs	r3, #177	; 0xb1
 80023c6:	461a      	mov	r2, r3
 80023c8:	79bb      	ldrb	r3, [r7, #6]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa42 f303 	asr.w	r3, r2, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

#if LOCK_VERSION == 0
    uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	3b01      	subs	r3, #1
 80023de:	4aa6      	ldr	r2, [pc, #664]	; (8002678 <qrcode_initBytes+0x2f4>)
 80023e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits][version - 1];
 80023e8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80023ec:	08db      	lsrs	r3, r3, #3
 80023ee:	b299      	uxth	r1, r3
 80023f0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	1e58      	subs	r0, r3, #1
 80023f8:	4ca0      	ldr	r4, [pc, #640]	; (800267c <qrcode_initBytes+0x2f8>)
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4403      	add	r3, r0
 8002404:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8002408:	1acb      	subs	r3, r1, r3
 800240a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t moduleCount = NUM_RAW_DATA_MODULES;
    uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits];
#endif

    struct BitBucket codewords;
    uint8_t codewordBytes[bb_getBufferSizeBytes(moduleCount)];
 800240e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fc6f 	bl	8000cf6 <bb_getBufferSizeBytes>
 8002418:	4603      	mov	r3, r0
 800241a:	4618      	mov	r0, r3
 800241c:	4603      	mov	r3, r0
 800241e:	3b01      	subs	r3, #1
 8002420:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002422:	b281      	uxth	r1, r0
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	f04f 0400 	mov.w	r4, #0
 8002430:	00d4      	lsls	r4, r2, #3
 8002432:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002436:	00cb      	lsls	r3, r1, #3
 8002438:	b281      	uxth	r1, r0
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	f04f 0400 	mov.w	r4, #0
 8002446:	00d4      	lsls	r4, r2, #3
 8002448:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800244c:	00cb      	lsls	r3, r1, #3
 800244e:	4603      	mov	r3, r0
 8002450:	3307      	adds	r3, #7
 8002452:	08db      	lsrs	r3, r3, #3
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	ebad 0d03 	sub.w	sp, sp, r3
 800245a:	466b      	mov	r3, sp
 800245c:	3300      	adds	r3, #0
 800245e:	64bb      	str	r3, [r7, #72]	; 0x48
    bb_initBuffer(&codewords, codewordBytes, (int32_t)sizeof(codewordBytes));
 8002460:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002462:	4602      	mov	r2, r0
 8002464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fc52 	bl	8000d12 <bb_initBuffer>

    // Place the data code words into the buffer
    int8_t mode = encodeDataCodewords(&codewords, data, length, version);
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002474:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002478:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800247c:	f7ff fd29 	bl	8001ed2 <encodeDataCodewords>
 8002480:	4603      	mov	r3, r0
 8002482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if (mode < 0) { return -1; }
 8002486:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800248a:	2b00      	cmp	r3, #0
 800248c:	da02      	bge.n	8002494 <qrcode_initBytes+0x110>
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	e0eb      	b.n	800266c <qrcode_initBytes+0x2e8>
    qrcode->mode = mode;
 8002494:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	70da      	strb	r2, [r3, #3]

    // Add terminator and pad up to a byte if applicable
    uint32_t padding = (dataCapacity * 8) - codewords.bitOffsetOrWidth;
 800249c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	461a      	mov	r2, r3
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (padding > 4) { padding = 4; }
 80024aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d901      	bls.n	80024b4 <qrcode_initBytes+0x130>
 80024b0:	2304      	movs	r3, #4
 80024b2:	65bb      	str	r3, [r7, #88]	; 0x58
    bb_appendBits(&codewords, 0, padding);
 80024b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fc62 	bl	8000d88 <bb_appendBits>
    bb_appendBits(&codewords, 0, (8 - codewords.bitOffsetOrWidth % 8) % 8);
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	425b      	negs	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fc55 	bl	8000d88 <bb_appendBits>

    // Pad with alternate bytes until data capacity is reached
    for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
 80024de:	23ec      	movs	r3, #236	; 0xec
 80024e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80024e4:	e00e      	b.n	8002504 <qrcode_initBytes+0x180>
        bb_appendBits(&codewords, padByte, 8);
 80024e6:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80024ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ee:	2208      	movs	r2, #8
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fc49 	bl	8000d88 <bb_appendBits>
    for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
 80024f6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80024fa:	f083 0302 	eor.w	r3, r3, #2
 80024fe:	43db      	mvns	r3, r3
 8002500:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800250a:	00d2      	lsls	r2, r2, #3
 800250c:	4293      	cmp	r3, r2
 800250e:	d3ea      	bcc.n	80024e6 <qrcode_initBytes+0x162>
    }

    BitBucket modulesGrid;
    bb_initGrid(&modulesGrid, modules, size);
 8002510:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002514:	f107 0320 	add.w	r3, r7, #32
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fc14 	bl	8000d48 <bb_initGrid>

    BitBucket isFunctionGrid;
    uint8_t isFunctionGridBytes[bb_getGridSizeBytes(size)];
 8002520:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fbd1 	bl	8000ccc <bb_getGridSizeBytes>
 800252a:	4603      	mov	r3, r0
 800252c:	4618      	mov	r0, r3
 800252e:	466b      	mov	r3, sp
 8002530:	461e      	mov	r6, r3
 8002532:	4603      	mov	r3, r0
 8002534:	3b01      	subs	r3, #1
 8002536:	643b      	str	r3, [r7, #64]	; 0x40
 8002538:	b281      	uxth	r1, r0
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	f04f 0400 	mov.w	r4, #0
 8002546:	00d4      	lsls	r4, r2, #3
 8002548:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800254c:	00cb      	lsls	r3, r1, #3
 800254e:	b281      	uxth	r1, r0
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	f04f 0400 	mov.w	r4, #0
 800255c:	00d4      	lsls	r4, r2, #3
 800255e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002562:	00cb      	lsls	r3, r1, #3
 8002564:	4603      	mov	r3, r0
 8002566:	3307      	adds	r3, #7
 8002568:	08db      	lsrs	r3, r3, #3
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	ebad 0d03 	sub.w	sp, sp, r3
 8002570:	466b      	mov	r3, sp
 8002572:	3300      	adds	r3, #0
 8002574:	63fb      	str	r3, [r7, #60]	; 0x3c
    bb_initGrid(&isFunctionGrid, isFunctionGridBytes, size);
 8002576:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002578:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fbe1 	bl	8000d48 <bb_initGrid>

    // Draw function patterns, draw all codewords, do masking
    drawFunctionPatterns(&modulesGrid, &isFunctionGrid, version, eccFormatBits);
 8002586:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800258a:	79fa      	ldrb	r2, [r7, #7]
 800258c:	f107 0114 	add.w	r1, r7, #20
 8002590:	f107 0020 	add.w	r0, r7, #32
 8002594:	f7ff f84c 	bl	8001630 <drawFunctionPatterns>
    performErrorCorrection(version, eccFormatBits, &codewords);
 8002598:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800259c:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fd7c 	bl	80020a0 <performErrorCorrection>
    drawCodewords(&modulesGrid, &isFunctionGrid, &codewords);
 80025a8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80025ac:	f107 0114 	add.w	r1, r7, #20
 80025b0:	f107 0320 	add.w	r3, r7, #32
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff f96b 	bl	8001890 <drawCodewords>

    // Find the best (lowest penalty) mask
    uint8_t mask = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    int32_t minPenalty = INT32_MAX;
 80025c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80025c4:	663b      	str	r3, [r7, #96]	; 0x60
    for (uint8_t i = 0; i < 8; i++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025cc:	e031      	b.n	8002632 <qrcode_initBytes+0x2ae>
        drawFormatBits(&modulesGrid, &isFunctionGrid, eccFormatBits, i);
 80025ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80025d2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80025d6:	f107 0114 	add.w	r1, r7, #20
 80025da:	f107 0020 	add.w	r0, r7, #32
 80025de:	f7fe febc 	bl	800135a <drawFormatBits>
        applyMask(&modulesGrid, &isFunctionGrid, i);
 80025e2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80025e6:	f107 0114 	add.w	r1, r7, #20
 80025ea:	f107 0320 	add.w	r3, r7, #32
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fce0 	bl	8000fb4 <applyMask>
        int penalty = getPenaltyScore(&modulesGrid);
 80025f4:	f107 0320 	add.w	r3, r7, #32
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff f9d8 	bl	80019ae <getPenaltyScore>
 80025fe:	4603      	mov	r3, r0
 8002600:	63bb      	str	r3, [r7, #56]	; 0x38
        if (penalty < minPenalty) {
 8002602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002606:	429a      	cmp	r2, r3
 8002608:	da05      	bge.n	8002616 <qrcode_initBytes+0x292>
            mask = i;
 800260a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800260e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            minPenalty = penalty;
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	663b      	str	r3, [r7, #96]	; 0x60
        }
        applyMask(&modulesGrid, &isFunctionGrid, i);  // Undoes the mask due to XOR
 8002616:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800261a:	f107 0114 	add.w	r1, r7, #20
 800261e:	f107 0320 	add.w	r3, r7, #32
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fcc6 	bl	8000fb4 <applyMask>
    for (uint8_t i = 0; i < 8; i++) {
 8002628:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800262c:	3301      	adds	r3, #1
 800262e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002632:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002636:	2b07      	cmp	r3, #7
 8002638:	d9c9      	bls.n	80025ce <qrcode_initBytes+0x24a>
    }

    qrcode->mask = mask;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8002640:	711a      	strb	r2, [r3, #4]

    // Overwrite old format bits
    drawFormatBits(&modulesGrid, &isFunctionGrid, eccFormatBits, mask);
 8002642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002646:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800264a:	f107 0114 	add.w	r1, r7, #20
 800264e:	f107 0020 	add.w	r0, r7, #32
 8002652:	f7fe fe82 	bl	800135a <drawFormatBits>

    // Apply the final choice of mask
    applyMask(&modulesGrid, &isFunctionGrid, mask);
 8002656:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800265a:	f107 0114 	add.w	r1, r7, #20
 800265e:	f107 0320 	add.w	r3, r7, #32
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fca6 	bl	8000fb4 <applyMask>

    return 0;
 8002668:	2300      	movs	r3, #0
 800266a:	46b5      	mov	sp, r6
 800266c:	46ad      	mov	sp, r5
}
 800266e:	4618      	mov	r0, r3
 8002670:	376c      	adds	r7, #108	; 0x6c
 8002672:	46bd      	mov	sp, r7
 8002674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002676:	bf00      	nop
 8002678:	08002adc 	.word	0x08002adc
 800267c:	080028fc 	.word	0x080028fc

08002680 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002680:	480d      	ldr	r0, [pc, #52]	; (80026b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002682:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8002684:	480d      	ldr	r0, [pc, #52]	; (80026bc <LoopForever+0x6>)
  ldr r1, =_edata
 8002686:	490e      	ldr	r1, [pc, #56]	; (80026c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002688:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <LoopForever+0xe>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800268c:	e002      	b.n	8002694 <LoopCopyDataInit>

0800268e <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800268e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002692:	3304      	adds	r3, #4

08002694 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8002694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002696:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8002698:	d3f9      	bcc.n	800268e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800269c:	4c0b      	ldr	r4, [pc, #44]	; (80026cc <LoopForever+0x16>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a0:	e001      	b.n	80026a6 <LoopFillZerobss>

080026a2 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80026a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a4:	3204      	adds	r2, #4

080026a6 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80026a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a8:	d3fb      	bcc.n	80026a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026aa:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80026ae:	f000 f817 	bl	80026e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026b2:	f7fd ff45 	bl	8000540 <main>

080026b6 <LoopForever>:

LoopForever:
    b LoopForever
 80026b6:	e7fe      	b.n	80026b6 <LoopForever>
  ldr   r0, =_estack
 80026b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80026c4:	08002b34 	.word	0x08002b34
  ldr r2, =_sbss
 80026c8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80026cc:	200008bc 	.word	0x200008bc

080026d0 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026d0:	e7fe      	b.n	80026d0 <ADC_IRQHandler>
	...

080026d4 <__errno>:
 80026d4:	4b01      	ldr	r3, [pc, #4]	; (80026dc <__errno+0x8>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000

080026e0 <__libc_init_array>:
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	4e0d      	ldr	r6, [pc, #52]	; (8002718 <__libc_init_array+0x38>)
 80026e4:	4c0d      	ldr	r4, [pc, #52]	; (800271c <__libc_init_array+0x3c>)
 80026e6:	1ba4      	subs	r4, r4, r6
 80026e8:	10a4      	asrs	r4, r4, #2
 80026ea:	2500      	movs	r5, #0
 80026ec:	42a5      	cmp	r5, r4
 80026ee:	d109      	bne.n	8002704 <__libc_init_array+0x24>
 80026f0:	4e0b      	ldr	r6, [pc, #44]	; (8002720 <__libc_init_array+0x40>)
 80026f2:	4c0c      	ldr	r4, [pc, #48]	; (8002724 <__libc_init_array+0x44>)
 80026f4:	f000 f8f6 	bl	80028e4 <_init>
 80026f8:	1ba4      	subs	r4, r4, r6
 80026fa:	10a4      	asrs	r4, r4, #2
 80026fc:	2500      	movs	r5, #0
 80026fe:	42a5      	cmp	r5, r4
 8002700:	d105      	bne.n	800270e <__libc_init_array+0x2e>
 8002702:	bd70      	pop	{r4, r5, r6, pc}
 8002704:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002708:	4798      	blx	r3
 800270a:	3501      	adds	r5, #1
 800270c:	e7ee      	b.n	80026ec <__libc_init_array+0xc>
 800270e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002712:	4798      	blx	r3
 8002714:	3501      	adds	r5, #1
 8002716:	e7f2      	b.n	80026fe <__libc_init_array+0x1e>
 8002718:	08002b2c 	.word	0x08002b2c
 800271c:	08002b2c 	.word	0x08002b2c
 8002720:	08002b2c 	.word	0x08002b2c
 8002724:	08002b30 	.word	0x08002b30

08002728 <malloc>:
 8002728:	4b02      	ldr	r3, [pc, #8]	; (8002734 <malloc+0xc>)
 800272a:	4601      	mov	r1, r0
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	f000 b86d 	b.w	800280c <_malloc_r>
 8002732:	bf00      	nop
 8002734:	20000000 	.word	0x20000000

08002738 <free>:
 8002738:	4b02      	ldr	r3, [pc, #8]	; (8002744 <free+0xc>)
 800273a:	4601      	mov	r1, r0
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	f000 b817 	b.w	8002770 <_free_r>
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000

08002748 <memcpy>:
 8002748:	b510      	push	{r4, lr}
 800274a:	1e43      	subs	r3, r0, #1
 800274c:	440a      	add	r2, r1
 800274e:	4291      	cmp	r1, r2
 8002750:	d100      	bne.n	8002754 <memcpy+0xc>
 8002752:	bd10      	pop	{r4, pc}
 8002754:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002758:	f803 4f01 	strb.w	r4, [r3, #1]!
 800275c:	e7f7      	b.n	800274e <memcpy+0x6>

0800275e <memset>:
 800275e:	4402      	add	r2, r0
 8002760:	4603      	mov	r3, r0
 8002762:	4293      	cmp	r3, r2
 8002764:	d100      	bne.n	8002768 <memset+0xa>
 8002766:	4770      	bx	lr
 8002768:	f803 1b01 	strb.w	r1, [r3], #1
 800276c:	e7f9      	b.n	8002762 <memset+0x4>
	...

08002770 <_free_r>:
 8002770:	b538      	push	{r3, r4, r5, lr}
 8002772:	4605      	mov	r5, r0
 8002774:	2900      	cmp	r1, #0
 8002776:	d045      	beq.n	8002804 <_free_r+0x94>
 8002778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800277c:	1f0c      	subs	r4, r1, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	bfb8      	it	lt
 8002782:	18e4      	addlt	r4, r4, r3
 8002784:	f000 f8ac 	bl	80028e0 <__malloc_lock>
 8002788:	4a1f      	ldr	r2, [pc, #124]	; (8002808 <_free_r+0x98>)
 800278a:	6813      	ldr	r3, [r2, #0]
 800278c:	4610      	mov	r0, r2
 800278e:	b933      	cbnz	r3, 800279e <_free_r+0x2e>
 8002790:	6063      	str	r3, [r4, #4]
 8002792:	6014      	str	r4, [r2, #0]
 8002794:	4628      	mov	r0, r5
 8002796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800279a:	f000 b8a2 	b.w	80028e2 <__malloc_unlock>
 800279e:	42a3      	cmp	r3, r4
 80027a0:	d90c      	bls.n	80027bc <_free_r+0x4c>
 80027a2:	6821      	ldr	r1, [r4, #0]
 80027a4:	1862      	adds	r2, r4, r1
 80027a6:	4293      	cmp	r3, r2
 80027a8:	bf04      	itt	eq
 80027aa:	681a      	ldreq	r2, [r3, #0]
 80027ac:	685b      	ldreq	r3, [r3, #4]
 80027ae:	6063      	str	r3, [r4, #4]
 80027b0:	bf04      	itt	eq
 80027b2:	1852      	addeq	r2, r2, r1
 80027b4:	6022      	streq	r2, [r4, #0]
 80027b6:	6004      	str	r4, [r0, #0]
 80027b8:	e7ec      	b.n	8002794 <_free_r+0x24>
 80027ba:	4613      	mov	r3, r2
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	b10a      	cbz	r2, 80027c4 <_free_r+0x54>
 80027c0:	42a2      	cmp	r2, r4
 80027c2:	d9fa      	bls.n	80027ba <_free_r+0x4a>
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	1858      	adds	r0, r3, r1
 80027c8:	42a0      	cmp	r0, r4
 80027ca:	d10b      	bne.n	80027e4 <_free_r+0x74>
 80027cc:	6820      	ldr	r0, [r4, #0]
 80027ce:	4401      	add	r1, r0
 80027d0:	1858      	adds	r0, r3, r1
 80027d2:	4282      	cmp	r2, r0
 80027d4:	6019      	str	r1, [r3, #0]
 80027d6:	d1dd      	bne.n	8002794 <_free_r+0x24>
 80027d8:	6810      	ldr	r0, [r2, #0]
 80027da:	6852      	ldr	r2, [r2, #4]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	4401      	add	r1, r0
 80027e0:	6019      	str	r1, [r3, #0]
 80027e2:	e7d7      	b.n	8002794 <_free_r+0x24>
 80027e4:	d902      	bls.n	80027ec <_free_r+0x7c>
 80027e6:	230c      	movs	r3, #12
 80027e8:	602b      	str	r3, [r5, #0]
 80027ea:	e7d3      	b.n	8002794 <_free_r+0x24>
 80027ec:	6820      	ldr	r0, [r4, #0]
 80027ee:	1821      	adds	r1, r4, r0
 80027f0:	428a      	cmp	r2, r1
 80027f2:	bf04      	itt	eq
 80027f4:	6811      	ldreq	r1, [r2, #0]
 80027f6:	6852      	ldreq	r2, [r2, #4]
 80027f8:	6062      	str	r2, [r4, #4]
 80027fa:	bf04      	itt	eq
 80027fc:	1809      	addeq	r1, r1, r0
 80027fe:	6021      	streq	r1, [r4, #0]
 8002800:	605c      	str	r4, [r3, #4]
 8002802:	e7c7      	b.n	8002794 <_free_r+0x24>
 8002804:	bd38      	pop	{r3, r4, r5, pc}
 8002806:	bf00      	nop
 8002808:	20000088 	.word	0x20000088

0800280c <_malloc_r>:
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	1ccd      	adds	r5, r1, #3
 8002810:	f025 0503 	bic.w	r5, r5, #3
 8002814:	3508      	adds	r5, #8
 8002816:	2d0c      	cmp	r5, #12
 8002818:	bf38      	it	cc
 800281a:	250c      	movcc	r5, #12
 800281c:	2d00      	cmp	r5, #0
 800281e:	4606      	mov	r6, r0
 8002820:	db01      	blt.n	8002826 <_malloc_r+0x1a>
 8002822:	42a9      	cmp	r1, r5
 8002824:	d903      	bls.n	800282e <_malloc_r+0x22>
 8002826:	230c      	movs	r3, #12
 8002828:	6033      	str	r3, [r6, #0]
 800282a:	2000      	movs	r0, #0
 800282c:	bd70      	pop	{r4, r5, r6, pc}
 800282e:	f000 f857 	bl	80028e0 <__malloc_lock>
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <_malloc_r+0xac>)
 8002834:	6814      	ldr	r4, [r2, #0]
 8002836:	4621      	mov	r1, r4
 8002838:	b991      	cbnz	r1, 8002860 <_malloc_r+0x54>
 800283a:	4c20      	ldr	r4, [pc, #128]	; (80028bc <_malloc_r+0xb0>)
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	b91b      	cbnz	r3, 8002848 <_malloc_r+0x3c>
 8002840:	4630      	mov	r0, r6
 8002842:	f000 f83d 	bl	80028c0 <_sbrk_r>
 8002846:	6020      	str	r0, [r4, #0]
 8002848:	4629      	mov	r1, r5
 800284a:	4630      	mov	r0, r6
 800284c:	f000 f838 	bl	80028c0 <_sbrk_r>
 8002850:	1c43      	adds	r3, r0, #1
 8002852:	d124      	bne.n	800289e <_malloc_r+0x92>
 8002854:	230c      	movs	r3, #12
 8002856:	6033      	str	r3, [r6, #0]
 8002858:	4630      	mov	r0, r6
 800285a:	f000 f842 	bl	80028e2 <__malloc_unlock>
 800285e:	e7e4      	b.n	800282a <_malloc_r+0x1e>
 8002860:	680b      	ldr	r3, [r1, #0]
 8002862:	1b5b      	subs	r3, r3, r5
 8002864:	d418      	bmi.n	8002898 <_malloc_r+0x8c>
 8002866:	2b0b      	cmp	r3, #11
 8002868:	d90f      	bls.n	800288a <_malloc_r+0x7e>
 800286a:	600b      	str	r3, [r1, #0]
 800286c:	50cd      	str	r5, [r1, r3]
 800286e:	18cc      	adds	r4, r1, r3
 8002870:	4630      	mov	r0, r6
 8002872:	f000 f836 	bl	80028e2 <__malloc_unlock>
 8002876:	f104 000b 	add.w	r0, r4, #11
 800287a:	1d23      	adds	r3, r4, #4
 800287c:	f020 0007 	bic.w	r0, r0, #7
 8002880:	1ac3      	subs	r3, r0, r3
 8002882:	d0d3      	beq.n	800282c <_malloc_r+0x20>
 8002884:	425a      	negs	r2, r3
 8002886:	50e2      	str	r2, [r4, r3]
 8002888:	e7d0      	b.n	800282c <_malloc_r+0x20>
 800288a:	428c      	cmp	r4, r1
 800288c:	684b      	ldr	r3, [r1, #4]
 800288e:	bf16      	itet	ne
 8002890:	6063      	strne	r3, [r4, #4]
 8002892:	6013      	streq	r3, [r2, #0]
 8002894:	460c      	movne	r4, r1
 8002896:	e7eb      	b.n	8002870 <_malloc_r+0x64>
 8002898:	460c      	mov	r4, r1
 800289a:	6849      	ldr	r1, [r1, #4]
 800289c:	e7cc      	b.n	8002838 <_malloc_r+0x2c>
 800289e:	1cc4      	adds	r4, r0, #3
 80028a0:	f024 0403 	bic.w	r4, r4, #3
 80028a4:	42a0      	cmp	r0, r4
 80028a6:	d005      	beq.n	80028b4 <_malloc_r+0xa8>
 80028a8:	1a21      	subs	r1, r4, r0
 80028aa:	4630      	mov	r0, r6
 80028ac:	f000 f808 	bl	80028c0 <_sbrk_r>
 80028b0:	3001      	adds	r0, #1
 80028b2:	d0cf      	beq.n	8002854 <_malloc_r+0x48>
 80028b4:	6025      	str	r5, [r4, #0]
 80028b6:	e7db      	b.n	8002870 <_malloc_r+0x64>
 80028b8:	20000088 	.word	0x20000088
 80028bc:	2000008c 	.word	0x2000008c

080028c0 <_sbrk_r>:
 80028c0:	b538      	push	{r3, r4, r5, lr}
 80028c2:	4c06      	ldr	r4, [pc, #24]	; (80028dc <_sbrk_r+0x1c>)
 80028c4:	2300      	movs	r3, #0
 80028c6:	4605      	mov	r5, r0
 80028c8:	4608      	mov	r0, r1
 80028ca:	6023      	str	r3, [r4, #0]
 80028cc:	f7fd fc9a 	bl	8000204 <_sbrk>
 80028d0:	1c43      	adds	r3, r0, #1
 80028d2:	d102      	bne.n	80028da <_sbrk_r+0x1a>
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	b103      	cbz	r3, 80028da <_sbrk_r+0x1a>
 80028d8:	602b      	str	r3, [r5, #0]
 80028da:	bd38      	pop	{r3, r4, r5, pc}
 80028dc:	200008b8 	.word	0x200008b8

080028e0 <__malloc_lock>:
 80028e0:	4770      	bx	lr

080028e2 <__malloc_unlock>:
 80028e2:	4770      	bx	lr

080028e4 <_init>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	bf00      	nop
 80028e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ea:	bc08      	pop	{r3}
 80028ec:	469e      	mov	lr, r3
 80028ee:	4770      	bx	lr

080028f0 <_fini>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr
